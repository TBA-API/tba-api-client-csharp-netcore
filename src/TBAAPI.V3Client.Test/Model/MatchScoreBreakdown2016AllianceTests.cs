/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using TBAAPI.V3Client.Api;
using TBAAPI.V3Client.Model;
using TBAAPI.V3Client.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace TBAAPI.V3Client.Test
{
    /// <summary>
    ///  Class for testing MatchScoreBreakdown2016Alliance
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class MatchScoreBreakdown2016AllianceTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for MatchScoreBreakdown2016Alliance
        //private MatchScoreBreakdown2016Alliance instance;

        public MatchScoreBreakdown2016AllianceTests()
        {
            // TODO uncomment below to create an instance of MatchScoreBreakdown2016Alliance
            //instance = new MatchScoreBreakdown2016Alliance();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MatchScoreBreakdown2016Alliance
        /// </summary>
        [Fact]
        public void MatchScoreBreakdown2016AllianceInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" MatchScoreBreakdown2016Alliance
            //Assert.IsInstanceOfType<MatchScoreBreakdown2016Alliance> (instance, "variable 'instance' is a MatchScoreBreakdown2016Alliance");
        }


        /// <summary>
        /// Test the property 'AutoPoints'
        /// </summary>
        [Fact]
        public void AutoPointsTest()
        {
            // TODO unit test for the property 'AutoPoints'
        }
        /// <summary>
        /// Test the property 'TeleopPoints'
        /// </summary>
        [Fact]
        public void TeleopPointsTest()
        {
            // TODO unit test for the property 'TeleopPoints'
        }
        /// <summary>
        /// Test the property 'BreachPoints'
        /// </summary>
        [Fact]
        public void BreachPointsTest()
        {
            // TODO unit test for the property 'BreachPoints'
        }
        /// <summary>
        /// Test the property 'FoulPoints'
        /// </summary>
        [Fact]
        public void FoulPointsTest()
        {
            // TODO unit test for the property 'FoulPoints'
        }
        /// <summary>
        /// Test the property 'CapturePoints'
        /// </summary>
        [Fact]
        public void CapturePointsTest()
        {
            // TODO unit test for the property 'CapturePoints'
        }
        /// <summary>
        /// Test the property 'AdjustPoints'
        /// </summary>
        [Fact]
        public void AdjustPointsTest()
        {
            // TODO unit test for the property 'AdjustPoints'
        }
        /// <summary>
        /// Test the property 'TotalPoints'
        /// </summary>
        [Fact]
        public void TotalPointsTest()
        {
            // TODO unit test for the property 'TotalPoints'
        }
        /// <summary>
        /// Test the property 'Robot1Auto'
        /// </summary>
        [Fact]
        public void Robot1AutoTest()
        {
            // TODO unit test for the property 'Robot1Auto'
        }
        /// <summary>
        /// Test the property 'Robot2Auto'
        /// </summary>
        [Fact]
        public void Robot2AutoTest()
        {
            // TODO unit test for the property 'Robot2Auto'
        }
        /// <summary>
        /// Test the property 'Robot3Auto'
        /// </summary>
        [Fact]
        public void Robot3AutoTest()
        {
            // TODO unit test for the property 'Robot3Auto'
        }
        /// <summary>
        /// Test the property 'AutoReachPoints'
        /// </summary>
        [Fact]
        public void AutoReachPointsTest()
        {
            // TODO unit test for the property 'AutoReachPoints'
        }
        /// <summary>
        /// Test the property 'AutoCrossingPoints'
        /// </summary>
        [Fact]
        public void AutoCrossingPointsTest()
        {
            // TODO unit test for the property 'AutoCrossingPoints'
        }
        /// <summary>
        /// Test the property 'AutoBouldersLow'
        /// </summary>
        [Fact]
        public void AutoBouldersLowTest()
        {
            // TODO unit test for the property 'AutoBouldersLow'
        }
        /// <summary>
        /// Test the property 'AutoBouldersHigh'
        /// </summary>
        [Fact]
        public void AutoBouldersHighTest()
        {
            // TODO unit test for the property 'AutoBouldersHigh'
        }
        /// <summary>
        /// Test the property 'AutoBoulderPoints'
        /// </summary>
        [Fact]
        public void AutoBoulderPointsTest()
        {
            // TODO unit test for the property 'AutoBoulderPoints'
        }
        /// <summary>
        /// Test the property 'TeleopCrossingPoints'
        /// </summary>
        [Fact]
        public void TeleopCrossingPointsTest()
        {
            // TODO unit test for the property 'TeleopCrossingPoints'
        }
        /// <summary>
        /// Test the property 'TeleopBouldersLow'
        /// </summary>
        [Fact]
        public void TeleopBouldersLowTest()
        {
            // TODO unit test for the property 'TeleopBouldersLow'
        }
        /// <summary>
        /// Test the property 'TeleopBouldersHigh'
        /// </summary>
        [Fact]
        public void TeleopBouldersHighTest()
        {
            // TODO unit test for the property 'TeleopBouldersHigh'
        }
        /// <summary>
        /// Test the property 'TeleopBoulderPoints'
        /// </summary>
        [Fact]
        public void TeleopBoulderPointsTest()
        {
            // TODO unit test for the property 'TeleopBoulderPoints'
        }
        /// <summary>
        /// Test the property 'TeleopDefensesBreached'
        /// </summary>
        [Fact]
        public void TeleopDefensesBreachedTest()
        {
            // TODO unit test for the property 'TeleopDefensesBreached'
        }
        /// <summary>
        /// Test the property 'TeleopChallengePoints'
        /// </summary>
        [Fact]
        public void TeleopChallengePointsTest()
        {
            // TODO unit test for the property 'TeleopChallengePoints'
        }
        /// <summary>
        /// Test the property 'TeleopScalePoints'
        /// </summary>
        [Fact]
        public void TeleopScalePointsTest()
        {
            // TODO unit test for the property 'TeleopScalePoints'
        }
        /// <summary>
        /// Test the property 'TeleopTowerCaptured'
        /// </summary>
        [Fact]
        public void TeleopTowerCapturedTest()
        {
            // TODO unit test for the property 'TeleopTowerCaptured'
        }
        /// <summary>
        /// Test the property 'TowerFaceA'
        /// </summary>
        [Fact]
        public void TowerFaceATest()
        {
            // TODO unit test for the property 'TowerFaceA'
        }
        /// <summary>
        /// Test the property 'TowerFaceB'
        /// </summary>
        [Fact]
        public void TowerFaceBTest()
        {
            // TODO unit test for the property 'TowerFaceB'
        }
        /// <summary>
        /// Test the property 'TowerFaceC'
        /// </summary>
        [Fact]
        public void TowerFaceCTest()
        {
            // TODO unit test for the property 'TowerFaceC'
        }
        /// <summary>
        /// Test the property 'TowerEndStrength'
        /// </summary>
        [Fact]
        public void TowerEndStrengthTest()
        {
            // TODO unit test for the property 'TowerEndStrength'
        }
        /// <summary>
        /// Test the property 'TechFoulCount'
        /// </summary>
        [Fact]
        public void TechFoulCountTest()
        {
            // TODO unit test for the property 'TechFoulCount'
        }
        /// <summary>
        /// Test the property 'FoulCount'
        /// </summary>
        [Fact]
        public void FoulCountTest()
        {
            // TODO unit test for the property 'FoulCount'
        }
        /// <summary>
        /// Test the property 'Position2'
        /// </summary>
        [Fact]
        public void Position2Test()
        {
            // TODO unit test for the property 'Position2'
        }
        /// <summary>
        /// Test the property 'Position3'
        /// </summary>
        [Fact]
        public void Position3Test()
        {
            // TODO unit test for the property 'Position3'
        }
        /// <summary>
        /// Test the property 'Position4'
        /// </summary>
        [Fact]
        public void Position4Test()
        {
            // TODO unit test for the property 'Position4'
        }
        /// <summary>
        /// Test the property 'Position5'
        /// </summary>
        [Fact]
        public void Position5Test()
        {
            // TODO unit test for the property 'Position5'
        }
        /// <summary>
        /// Test the property 'Position1crossings'
        /// </summary>
        [Fact]
        public void Position1crossingsTest()
        {
            // TODO unit test for the property 'Position1crossings'
        }
        /// <summary>
        /// Test the property 'Position2crossings'
        /// </summary>
        [Fact]
        public void Position2crossingsTest()
        {
            // TODO unit test for the property 'Position2crossings'
        }
        /// <summary>
        /// Test the property 'Position3crossings'
        /// </summary>
        [Fact]
        public void Position3crossingsTest()
        {
            // TODO unit test for the property 'Position3crossings'
        }
        /// <summary>
        /// Test the property 'Position4crossings'
        /// </summary>
        [Fact]
        public void Position4crossingsTest()
        {
            // TODO unit test for the property 'Position4crossings'
        }
        /// <summary>
        /// Test the property 'Position5crossings'
        /// </summary>
        [Fact]
        public void Position5crossingsTest()
        {
            // TODO unit test for the property 'Position5crossings'
        }

    }

}
