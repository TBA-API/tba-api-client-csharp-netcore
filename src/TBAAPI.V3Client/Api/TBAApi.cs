/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using TBAAPI.V3Client.Client;
using TBAAPI.V3Client.Model;

namespace TBAAPI.V3Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITBAApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns API status, and TBA status information.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>APIStatus</returns>
        APIStatus GetStatus (string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns API status, and TBA status information.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of APIStatus</returns>
        ApiResponse<APIStatus> GetStatusWithHttpInfo (string ifModifiedSince = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITBAApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns API status, and TBA status information.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of APIStatus</returns>
        System.Threading.Tasks.Task<APIStatus> GetStatusAsync (string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns API status, and TBA status information.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (APIStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIStatus>> GetStatusAsyncWithHttpInfo (string ifModifiedSince = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITBAApi : ITBAApiSync, ITBAApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TBAApi : ITBAApi
    {
        private TBAAPI.V3Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TBAApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TBAApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TBAApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TBAApi(String basePath)
        {
            this.Configuration = TBAAPI.V3Client.Client.Configuration.MergeConfigurations(
                TBAAPI.V3Client.Client.GlobalConfiguration.Instance,
                new TBAAPI.V3Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new TBAAPI.V3Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TBAAPI.V3Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = TBAAPI.V3Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TBAApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TBAApi(TBAAPI.V3Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TBAAPI.V3Client.Client.Configuration.MergeConfigurations(
                TBAAPI.V3Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new TBAAPI.V3Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TBAAPI.V3Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = TBAAPI.V3Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TBAApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TBAApi(TBAAPI.V3Client.Client.ISynchronousClient client,TBAAPI.V3Client.Client.IAsynchronousClient asyncClient, TBAAPI.V3Client.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TBAAPI.V3Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TBAAPI.V3Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TBAAPI.V3Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TBAAPI.V3Client.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TBAAPI.V3Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Returns API status, and TBA status information.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>APIStatus</returns>
        public APIStatus GetStatus (string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<APIStatus> localVarResponse = GetStatusWithHttpInfo(ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns API status, and TBA status information.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of APIStatus</returns>
        public TBAAPI.V3Client.Client.ApiResponse< APIStatus > GetStatusWithHttpInfo (string ifModifiedSince = default(string))
        {
            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< APIStatus >("/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns API status, and TBA status information.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of APIStatus</returns>
        public async System.Threading.Tasks.Task<APIStatus> GetStatusAsync (string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<APIStatus> localVarResponse = await GetStatusAsyncWithHttpInfo(ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns API status, and TBA status information.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (APIStatus)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<APIStatus>> GetStatusAsyncWithHttpInfo (string ifModifiedSince = default(string))
        {

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<APIStatus>("/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
