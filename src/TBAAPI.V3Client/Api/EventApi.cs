/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using TBAAPI.V3Client.Client;
using TBAAPI.V3Client.Model;

namespace TBAAPI.V3Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events in the given district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Event&gt;</returns>
        List<Event> GetDistrictEvents (string districtKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events in the given district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Event&gt;</returns>
        ApiResponse<List<Event>> GetDistrictEventsWithHttpInfo (string districtKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of event keys for events in the given district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetDistrictEventsKeys (string districtKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of event keys for events in the given district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetDistrictEventsKeysWithHttpInfo (string districtKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events in the given district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;EventSimple&gt;</returns>
        List<EventSimple> GetDistrictEventsSimple (string districtKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events in the given district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
        ApiResponse<List<EventSimple>> GetDistrictEventsSimpleWithHttpInfo (string districtKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an Event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Event</returns>
        Event GetEvent (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an Event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of Event</returns>
        ApiResponse<Event> GetEventWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Elimination Alliances for the given Event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;EliminationAlliance&gt;</returns>
        List<EliminationAlliance> GetEventAlliances (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Elimination Alliances for the given Event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;EliminationAlliance&gt;</returns>
        ApiResponse<List<EliminationAlliance>> GetEventAlliancesWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of awards from the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Award&gt;</returns>
        List<Award> GetEventAwards (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of awards from the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Award&gt;</returns>
        ApiResponse<List<Award>> GetEventAwardsWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team rankings for the Event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>EventDistrictPoints</returns>
        EventDistrictPoints GetEventDistrictPoints (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team rankings for the Event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of EventDistrictPoints</returns>
        ApiResponse<EventDistrictPoints> GetEventDistrictPointsWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a set of Event-specific insights for the given Event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>EventInsights</returns>
        EventInsights GetEventInsights (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a set of Event-specific insights for the given Event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of EventInsights</returns>
        ApiResponse<EventInsights> GetEventInsightsWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetEventMatchTimeseries (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetEventMatchTimeseriesWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of matches for the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Match&gt;</returns>
        List<Match> GetEventMatches (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of matches for the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Match&gt;</returns>
        ApiResponse<List<Match>> GetEventMatchesWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of match keys for the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetEventMatchesKeys (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of match keys for the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetEventMatchesKeysWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of matches for the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;MatchSimple&gt;</returns>
        List<MatchSimple> GetEventMatchesSimple (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of matches for the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;MatchSimple&gt;</returns>
        ApiResponse<List<MatchSimple>> GetEventMatchesSimpleWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>EventOPRs</returns>
        EventOPRs GetEventOPRs (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of EventOPRs</returns>
        ApiResponse<EventOPRs> GetEventOPRsWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Object</returns>
        Object GetEventPredictions (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetEventPredictionsWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team rankings for the Event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>EventRanking</returns>
        EventRanking GetEventRankings (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team rankings for the Event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of EventRanking</returns>
        ApiResponse<EventRanking> GetEventRankingsWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form Event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>EventSimple</returns>
        EventSimple GetEventSimple (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form Event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of EventSimple</returns>
        ApiResponse<EventSimple> GetEventSimpleWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Team&gt;</returns>
        List<Team> GetEventTeams (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        ApiResponse<List<Team>> GetEventTeamsWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetEventTeamsKeys (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetEventTeamsKeysWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;TeamSimple&gt;</returns>
        List<TeamSimple> GetEventTeamsSimple (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
        ApiResponse<List<TeamSimple>> GetEventTeamsSimpleWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for teams competing at the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Dictionary&lt;string, TeamEventStatus&gt;</returns>
        Dictionary<string, TeamEventStatus> GetEventTeamsStatuses (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for teams competing at the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        ApiResponse<Dictionary<string, TeamEventStatus>> GetEventTeamsStatusesWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Event&gt;</returns>
        List<Event> GetEventsByYear (int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Event&gt;</returns>
        ApiResponse<List<Event>> GetEventsByYearWithHttpInfo (int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of event keys in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetEventsByYearKeys (int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of event keys in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetEventsByYearKeysWithHttpInfo (int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;EventSimple&gt;</returns>
        List<EventSimple> GetEventsByYearSimple (int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
        ApiResponse<List<EventSimple>> GetEventsByYearSimpleWithHttpInfo (int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of awards the given team won at the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Award&gt;</returns>
        List<Award> GetTeamEventAwards (string teamKey, string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of awards the given team won at the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Award&gt;</returns>
        ApiResponse<List<Award>> GetTeamEventAwardsWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of matches for the given team and event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Match&gt;</returns>
        List<Match> GetTeamEventMatches (string teamKey, string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of matches for the given team and event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Match&gt;</returns>
        ApiResponse<List<Match>> GetTeamEventMatchesWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of match keys for matches for the given team and event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetTeamEventMatchesKeys (string teamKey, string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of match keys for matches for the given team and event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetTeamEventMatchesKeysWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of matches for the given team and event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Match&gt;</returns>
        List<Match> GetTeamEventMatchesSimple (string teamKey, string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of matches for the given team and event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Match&gt;</returns>
        ApiResponse<List<Match>> GetTeamEventMatchesSimpleWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the competition rank and status of the team at the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>TeamEventStatus</returns>
        TeamEventStatus GetTeamEventStatus (string teamKey, string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the competition rank and status of the team at the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of TeamEventStatus</returns>
        ApiResponse<TeamEventStatus> GetTeamEventStatusWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of all events this team has competed at.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Event&gt;</returns>
        List<Event> GetTeamEvents (string teamKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of all events this team has competed at.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Event&gt;</returns>
        ApiResponse<List<Event>> GetTeamEventsWithHttpInfo (string teamKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Event&gt;</returns>
        List<Event> GetTeamEventsByYear (string teamKey, int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Event&gt;</returns>
        ApiResponse<List<Event>> GetTeamEventsByYearWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of the event keys for events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetTeamEventsByYearKeys (string teamKey, int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of the event keys for events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetTeamEventsByYearKeysWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;EventSimple&gt;</returns>
        List<EventSimple> GetTeamEventsByYearSimple (string teamKey, int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
        ApiResponse<List<EventSimple>> GetTeamEventsByYearSimpleWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of the event keys for all events this team has competed at.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetTeamEventsKeys (string teamKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of the event keys for all events this team has competed at.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetTeamEventsKeysWithHttpInfo (string teamKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of all events this team has competed at.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;EventSimple&gt;</returns>
        List<EventSimple> GetTeamEventsSimple (string teamKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of all events this team has competed at.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
        ApiResponse<List<EventSimple>> GetTeamEventsSimpleWithHttpInfo (string teamKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Dictionary&lt;string, TeamEventStatus&gt;</returns>
        Dictionary<string, TeamEventStatus> GetTeamEventsStatusesByYear (string teamKey, int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        ApiResponse<Dictionary<string, TeamEventStatus>> GetTeamEventsStatusesByYearWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events in the given district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Event&gt;</returns>
        System.Threading.Tasks.Task<List<Event>> GetDistrictEventsAsync (string districtKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events in the given district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Event>>> GetDistrictEventsAsyncWithHttpInfo (string districtKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of event keys for events in the given district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetDistrictEventsKeysAsync (string districtKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of event keys for events in the given district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetDistrictEventsKeysAsyncWithHttpInfo (string districtKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events in the given district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;EventSimple&gt;</returns>
        System.Threading.Tasks.Task<List<EventSimple>> GetDistrictEventsSimpleAsync (string districtKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events in the given district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EventSimple>>> GetDistrictEventsSimpleAsyncWithHttpInfo (string districtKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an Event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of Event</returns>
        System.Threading.Tasks.Task<Event> GetEventAsync (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an Event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (Event)</returns>
        System.Threading.Tasks.Task<ApiResponse<Event>> GetEventAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Elimination Alliances for the given Event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;EliminationAlliance&gt;</returns>
        System.Threading.Tasks.Task<List<EliminationAlliance>> GetEventAlliancesAsync (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Elimination Alliances for the given Event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EliminationAlliance&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EliminationAlliance>>> GetEventAlliancesAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of awards from the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Award&gt;</returns>
        System.Threading.Tasks.Task<List<Award>> GetEventAwardsAsync (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of awards from the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Award&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Award>>> GetEventAwardsAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team rankings for the Event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of EventDistrictPoints</returns>
        System.Threading.Tasks.Task<EventDistrictPoints> GetEventDistrictPointsAsync (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team rankings for the Event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (EventDistrictPoints)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventDistrictPoints>> GetEventDistrictPointsAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a set of Event-specific insights for the given Event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of EventInsights</returns>
        System.Threading.Tasks.Task<EventInsights> GetEventInsightsAsync (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a set of Event-specific insights for the given Event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (EventInsights)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventInsights>> GetEventInsightsAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetEventMatchTimeseriesAsync (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetEventMatchTimeseriesAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of matches for the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Match&gt;</returns>
        System.Threading.Tasks.Task<List<Match>> GetEventMatchesAsync (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of matches for the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Match>>> GetEventMatchesAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of match keys for the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetEventMatchesKeysAsync (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of match keys for the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetEventMatchesKeysAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of matches for the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;MatchSimple&gt;</returns>
        System.Threading.Tasks.Task<List<MatchSimple>> GetEventMatchesSimpleAsync (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of matches for the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MatchSimple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MatchSimple>>> GetEventMatchesSimpleAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of EventOPRs</returns>
        System.Threading.Tasks.Task<EventOPRs> GetEventOPRsAsync (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (EventOPRs)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventOPRs>> GetEventOPRsAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetEventPredictionsAsync (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEventPredictionsAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team rankings for the Event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of EventRanking</returns>
        System.Threading.Tasks.Task<EventRanking> GetEventRankingsAsync (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team rankings for the Event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (EventRanking)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventRanking>> GetEventRankingsAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form Event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of EventSimple</returns>
        System.Threading.Tasks.Task<EventSimple> GetEventSimpleAsync (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form Event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (EventSimple)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventSimple>> GetEventSimpleAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        System.Threading.Tasks.Task<List<Team>> GetEventTeamsAsync (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Team>>> GetEventTeamsAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetEventTeamsKeysAsync (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetEventTeamsKeysAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;TeamSimple&gt;</returns>
        System.Threading.Tasks.Task<List<TeamSimple>> GetEventTeamsSimpleAsync (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamSimple>>> GetEventTeamsSimpleAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for teams competing at the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, TeamEventStatus>> GetEventTeamsStatusesAsync (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for teams competing at the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, TeamEventStatus&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, TeamEventStatus>>> GetEventTeamsStatusesAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Event&gt;</returns>
        System.Threading.Tasks.Task<List<Event>> GetEventsByYearAsync (int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Event>>> GetEventsByYearAsyncWithHttpInfo (int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of event keys in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetEventsByYearKeysAsync (int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of event keys in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetEventsByYearKeysAsyncWithHttpInfo (int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;EventSimple&gt;</returns>
        System.Threading.Tasks.Task<List<EventSimple>> GetEventsByYearSimpleAsync (int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EventSimple>>> GetEventsByYearSimpleAsyncWithHttpInfo (int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of awards the given team won at the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Award&gt;</returns>
        System.Threading.Tasks.Task<List<Award>> GetTeamEventAwardsAsync (string teamKey, string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of awards the given team won at the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Award&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Award>>> GetTeamEventAwardsAsyncWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of matches for the given team and event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Match&gt;</returns>
        System.Threading.Tasks.Task<List<Match>> GetTeamEventMatchesAsync (string teamKey, string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of matches for the given team and event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Match>>> GetTeamEventMatchesAsyncWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of match keys for matches for the given team and event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetTeamEventMatchesKeysAsync (string teamKey, string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of match keys for matches for the given team and event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetTeamEventMatchesKeysAsyncWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of matches for the given team and event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Match&gt;</returns>
        System.Threading.Tasks.Task<List<Match>> GetTeamEventMatchesSimpleAsync (string teamKey, string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of matches for the given team and event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Match>>> GetTeamEventMatchesSimpleAsyncWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the competition rank and status of the team at the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of TeamEventStatus</returns>
        System.Threading.Tasks.Task<TeamEventStatus> GetTeamEventStatusAsync (string teamKey, string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the competition rank and status of the team at the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (TeamEventStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamEventStatus>> GetTeamEventStatusAsyncWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of all events this team has competed at.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Event&gt;</returns>
        System.Threading.Tasks.Task<List<Event>> GetTeamEventsAsync (string teamKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of all events this team has competed at.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Event>>> GetTeamEventsAsyncWithHttpInfo (string teamKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Event&gt;</returns>
        System.Threading.Tasks.Task<List<Event>> GetTeamEventsByYearAsync (string teamKey, int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Event>>> GetTeamEventsByYearAsyncWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of the event keys for events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetTeamEventsByYearKeysAsync (string teamKey, int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of the event keys for events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetTeamEventsByYearKeysAsyncWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;EventSimple&gt;</returns>
        System.Threading.Tasks.Task<List<EventSimple>> GetTeamEventsByYearSimpleAsync (string teamKey, int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EventSimple>>> GetTeamEventsByYearSimpleAsyncWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of the event keys for all events this team has competed at.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetTeamEventsKeysAsync (string teamKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of the event keys for all events this team has competed at.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetTeamEventsKeysAsyncWithHttpInfo (string teamKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of all events this team has competed at.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;EventSimple&gt;</returns>
        System.Threading.Tasks.Task<List<EventSimple>> GetTeamEventsSimpleAsync (string teamKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of all events this team has competed at.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EventSimple>>> GetTeamEventsSimpleAsyncWithHttpInfo (string teamKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, TeamEventStatus>> GetTeamEventsStatusesByYearAsync (string teamKey, int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, TeamEventStatus&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, TeamEventStatus>>> GetTeamEventsStatusesByYearAsyncWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventApi : IEventApiSync, IEventApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EventApi : IEventApi
    {
        private TBAAPI.V3Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EventApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventApi(String basePath)
        {
            this.Configuration = TBAAPI.V3Client.Client.Configuration.MergeConfigurations(
                TBAAPI.V3Client.Client.GlobalConfiguration.Instance,
                new TBAAPI.V3Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new TBAAPI.V3Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TBAAPI.V3Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = TBAAPI.V3Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EventApi(TBAAPI.V3Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TBAAPI.V3Client.Client.Configuration.MergeConfigurations(
                TBAAPI.V3Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new TBAAPI.V3Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TBAAPI.V3Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = TBAAPI.V3Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EventApi(TBAAPI.V3Client.Client.ISynchronousClient client,TBAAPI.V3Client.Client.IAsynchronousClient asyncClient, TBAAPI.V3Client.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TBAAPI.V3Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TBAAPI.V3Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TBAAPI.V3Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TBAAPI.V3Client.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TBAAPI.V3Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Gets a list of events in the given district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Event&gt;</returns>
        public List<Event> GetDistrictEvents (string districtKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Event>> localVarResponse = GetDistrictEventsWithHttpInfo(districtKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of events in the given district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Event&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<Event> > GetDistrictEventsWithHttpInfo (string districtKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'districtKey' when calling EventApi->GetDistrictEvents");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (districtKey != null)
                localVarRequestOptions.PathParameters.Add("district_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Event> >("/district/{district_key}/events", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDistrictEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of events in the given district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Event&gt;</returns>
        public async System.Threading.Tasks.Task<List<Event>> GetDistrictEventsAsync (string districtKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Event>> localVarResponse = await GetDistrictEventsAsyncWithHttpInfo(districtKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of events in the given district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<Event>>> GetDistrictEventsAsyncWithHttpInfo (string districtKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'districtKey' when calling EventApi->GetDistrictEvents");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (districtKey != null)
                localVarRequestOptions.PathParameters.Add("district_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Event>>("/district/{district_key}/events", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDistrictEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of event keys for events in the given district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetDistrictEventsKeys (string districtKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = GetDistrictEventsKeysWithHttpInfo(districtKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of event keys for events in the given district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<string> > GetDistrictEventsKeysWithHttpInfo (string districtKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'districtKey' when calling EventApi->GetDistrictEventsKeys");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (districtKey != null)
                localVarRequestOptions.PathParameters.Add("district_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<string> >("/district/{district_key}/events/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDistrictEventsKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of event keys for events in the given district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetDistrictEventsKeysAsync (string districtKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = await GetDistrictEventsKeysAsyncWithHttpInfo(districtKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of event keys for events in the given district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<string>>> GetDistrictEventsKeysAsyncWithHttpInfo (string districtKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'districtKey' when calling EventApi->GetDistrictEventsKeys");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (districtKey != null)
                localVarRequestOptions.PathParameters.Add("district_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/district/{district_key}/events/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDistrictEventsKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of events in the given district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;EventSimple&gt;</returns>
        public List<EventSimple> GetDistrictEventsSimple (string districtKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<EventSimple>> localVarResponse = GetDistrictEventsSimpleWithHttpInfo(districtKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a short-form list of events in the given district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<EventSimple> > GetDistrictEventsSimpleWithHttpInfo (string districtKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'districtKey' when calling EventApi->GetDistrictEventsSimple");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (districtKey != null)
                localVarRequestOptions.PathParameters.Add("district_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<EventSimple> >("/district/{district_key}/events/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDistrictEventsSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of events in the given district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;EventSimple&gt;</returns>
        public async System.Threading.Tasks.Task<List<EventSimple>> GetDistrictEventsSimpleAsync (string districtKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<EventSimple>> localVarResponse = await GetDistrictEventsSimpleAsyncWithHttpInfo(districtKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a short-form list of events in the given district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<EventSimple>>> GetDistrictEventsSimpleAsyncWithHttpInfo (string districtKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'districtKey' when calling EventApi->GetDistrictEventsSimple");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (districtKey != null)
                localVarRequestOptions.PathParameters.Add("district_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EventSimple>>("/district/{district_key}/events/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDistrictEventsSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets an Event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Event</returns>
        public Event GetEvent (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<Event> localVarResponse = GetEventWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets an Event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of Event</returns>
        public TBAAPI.V3Client.Client.ApiResponse< Event > GetEventWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEvent");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Event >("/event/{event_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEvent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets an Event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of Event</returns>
        public async System.Threading.Tasks.Task<Event> GetEventAsync (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<Event> localVarResponse = await GetEventAsyncWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets an Event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (Event)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<Event>> GetEventAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEvent");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Event>("/event/{event_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEvent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of Elimination Alliances for the given Event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;EliminationAlliance&gt;</returns>
        public List<EliminationAlliance> GetEventAlliances (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<EliminationAlliance>> localVarResponse = GetEventAlliancesWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of Elimination Alliances for the given Event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;EliminationAlliance&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<EliminationAlliance> > GetEventAlliancesWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventAlliances");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<EliminationAlliance> >("/event/{event_key}/alliances", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventAlliances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of Elimination Alliances for the given Event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;EliminationAlliance&gt;</returns>
        public async System.Threading.Tasks.Task<List<EliminationAlliance>> GetEventAlliancesAsync (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<EliminationAlliance>> localVarResponse = await GetEventAlliancesAsyncWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of Elimination Alliances for the given Event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EliminationAlliance&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<EliminationAlliance>>> GetEventAlliancesAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventAlliances");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EliminationAlliance>>("/event/{event_key}/alliances", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventAlliances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of awards from the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Award&gt;</returns>
        public List<Award> GetEventAwards (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Award>> localVarResponse = GetEventAwardsWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of awards from the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Award&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<Award> > GetEventAwardsWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventAwards");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Award> >("/event/{event_key}/awards", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventAwards", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of awards from the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Award&gt;</returns>
        public async System.Threading.Tasks.Task<List<Award>> GetEventAwardsAsync (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Award>> localVarResponse = await GetEventAwardsAsyncWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of awards from the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Award&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<Award>>> GetEventAwardsAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventAwards");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Award>>("/event/{event_key}/awards", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventAwards", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of team rankings for the Event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>EventDistrictPoints</returns>
        public EventDistrictPoints GetEventDistrictPoints (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<EventDistrictPoints> localVarResponse = GetEventDistrictPointsWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of team rankings for the Event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of EventDistrictPoints</returns>
        public TBAAPI.V3Client.Client.ApiResponse< EventDistrictPoints > GetEventDistrictPointsWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventDistrictPoints");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< EventDistrictPoints >("/event/{event_key}/district_points", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventDistrictPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of team rankings for the Event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of EventDistrictPoints</returns>
        public async System.Threading.Tasks.Task<EventDistrictPoints> GetEventDistrictPointsAsync (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<EventDistrictPoints> localVarResponse = await GetEventDistrictPointsAsyncWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of team rankings for the Event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (EventDistrictPoints)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<EventDistrictPoints>> GetEventDistrictPointsAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventDistrictPoints");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<EventDistrictPoints>("/event/{event_key}/district_points", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventDistrictPoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a set of Event-specific insights for the given Event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>EventInsights</returns>
        public EventInsights GetEventInsights (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<EventInsights> localVarResponse = GetEventInsightsWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a set of Event-specific insights for the given Event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of EventInsights</returns>
        public TBAAPI.V3Client.Client.ApiResponse< EventInsights > GetEventInsightsWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventInsights");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< EventInsights >("/event/{event_key}/insights", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventInsights", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a set of Event-specific insights for the given Event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of EventInsights</returns>
        public async System.Threading.Tasks.Task<EventInsights> GetEventInsightsAsync (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<EventInsights> localVarResponse = await GetEventInsightsAsyncWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a set of Event-specific insights for the given Event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (EventInsights)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<EventInsights>> GetEventInsightsAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventInsights");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<EventInsights>("/event/{event_key}/insights", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventInsights", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetEventMatchTimeseries (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = GetEventMatchTimeseriesWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<string> > GetEventMatchTimeseriesWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventMatchTimeseries");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<string> >("/event/{event_key}/matches/timeseries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventMatchTimeseries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetEventMatchTimeseriesAsync (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = await GetEventMatchTimeseriesAsyncWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<string>>> GetEventMatchTimeseriesAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventMatchTimeseries");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/event/{event_key}/matches/timeseries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventMatchTimeseries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of matches for the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Match&gt;</returns>
        public List<Match> GetEventMatches (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Match>> localVarResponse = GetEventMatchesWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of matches for the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Match&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<Match> > GetEventMatchesWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventMatches");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Match> >("/event/{event_key}/matches", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventMatches", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of matches for the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Match&gt;</returns>
        public async System.Threading.Tasks.Task<List<Match>> GetEventMatchesAsync (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Match>> localVarResponse = await GetEventMatchesAsyncWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of matches for the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<Match>>> GetEventMatchesAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventMatches");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Match>>("/event/{event_key}/matches", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventMatches", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of match keys for the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetEventMatchesKeys (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = GetEventMatchesKeysWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of match keys for the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<string> > GetEventMatchesKeysWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventMatchesKeys");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<string> >("/event/{event_key}/matches/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventMatchesKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of match keys for the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetEventMatchesKeysAsync (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = await GetEventMatchesKeysAsyncWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of match keys for the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<string>>> GetEventMatchesKeysAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventMatchesKeys");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/event/{event_key}/matches/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventMatchesKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of matches for the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;MatchSimple&gt;</returns>
        public List<MatchSimple> GetEventMatchesSimple (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<MatchSimple>> localVarResponse = GetEventMatchesSimpleWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a short-form list of matches for the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;MatchSimple&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<MatchSimple> > GetEventMatchesSimpleWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventMatchesSimple");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<MatchSimple> >("/event/{event_key}/matches/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventMatchesSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of matches for the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;MatchSimple&gt;</returns>
        public async System.Threading.Tasks.Task<List<MatchSimple>> GetEventMatchesSimpleAsync (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<MatchSimple>> localVarResponse = await GetEventMatchesSimpleAsyncWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a short-form list of matches for the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MatchSimple&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<MatchSimple>>> GetEventMatchesSimpleAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventMatchesSimple");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MatchSimple>>("/event/{event_key}/matches/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventMatchesSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>EventOPRs</returns>
        public EventOPRs GetEventOPRs (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<EventOPRs> localVarResponse = GetEventOPRsWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of EventOPRs</returns>
        public TBAAPI.V3Client.Client.ApiResponse< EventOPRs > GetEventOPRsWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventOPRs");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< EventOPRs >("/event/{event_key}/oprs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventOPRs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of EventOPRs</returns>
        public async System.Threading.Tasks.Task<EventOPRs> GetEventOPRsAsync (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<EventOPRs> localVarResponse = await GetEventOPRsAsyncWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (EventOPRs)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<EventOPRs>> GetEventOPRsAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventOPRs");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<EventOPRs>("/event/{event_key}/oprs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventOPRs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Object</returns>
        public Object GetEventPredictions (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<Object> localVarResponse = GetEventPredictionsWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public TBAAPI.V3Client.Client.ApiResponse< Object > GetEventPredictionsWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventPredictions");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Object >("/event/{event_key}/predictions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventPredictions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetEventPredictionsAsync (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<Object> localVarResponse = await GetEventPredictionsAsyncWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<Object>> GetEventPredictionsAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventPredictions");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/event/{event_key}/predictions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventPredictions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of team rankings for the Event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>EventRanking</returns>
        public EventRanking GetEventRankings (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<EventRanking> localVarResponse = GetEventRankingsWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of team rankings for the Event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of EventRanking</returns>
        public TBAAPI.V3Client.Client.ApiResponse< EventRanking > GetEventRankingsWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventRankings");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< EventRanking >("/event/{event_key}/rankings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventRankings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of team rankings for the Event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of EventRanking</returns>
        public async System.Threading.Tasks.Task<EventRanking> GetEventRankingsAsync (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<EventRanking> localVarResponse = await GetEventRankingsAsyncWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of team rankings for the Event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (EventRanking)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<EventRanking>> GetEventRankingsAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventRankings");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<EventRanking>("/event/{event_key}/rankings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventRankings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form Event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>EventSimple</returns>
        public EventSimple GetEventSimple (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<EventSimple> localVarResponse = GetEventSimpleWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a short-form Event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of EventSimple</returns>
        public TBAAPI.V3Client.Client.ApiResponse< EventSimple > GetEventSimpleWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventSimple");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< EventSimple >("/event/{event_key}/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form Event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of EventSimple</returns>
        public async System.Threading.Tasks.Task<EventSimple> GetEventSimpleAsync (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<EventSimple> localVarResponse = await GetEventSimpleAsyncWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a short-form Event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (EventSimple)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<EventSimple>> GetEventSimpleAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventSimple");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<EventSimple>("/event/{event_key}/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Team&gt;</returns>
        public List<Team> GetEventTeams (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Team>> localVarResponse = GetEventTeamsWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<Team> > GetEventTeamsWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventTeams");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Team> >("/event/{event_key}/teams", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTeams", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        public async System.Threading.Tasks.Task<List<Team>> GetEventTeamsAsync (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Team>> localVarResponse = await GetEventTeamsAsyncWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<Team>>> GetEventTeamsAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventTeams");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Team>>("/event/{event_key}/teams", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTeams", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetEventTeamsKeys (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = GetEventTeamsKeysWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<string> > GetEventTeamsKeysWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventTeamsKeys");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<string> >("/event/{event_key}/teams/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTeamsKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetEventTeamsKeysAsync (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = await GetEventTeamsKeysAsyncWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<string>>> GetEventTeamsKeysAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventTeamsKeys");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/event/{event_key}/teams/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTeamsKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;TeamSimple&gt;</returns>
        public List<TeamSimple> GetEventTeamsSimple (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<TeamSimple>> localVarResponse = GetEventTeamsSimpleWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<TeamSimple> > GetEventTeamsSimpleWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventTeamsSimple");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<TeamSimple> >("/event/{event_key}/teams/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTeamsSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;TeamSimple&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamSimple>> GetEventTeamsSimpleAsync (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<TeamSimple>> localVarResponse = await GetEventTeamsSimpleAsyncWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<TeamSimple>>> GetEventTeamsSimpleAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventTeamsSimple");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TeamSimple>>("/event/{event_key}/teams/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTeamsSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for teams competing at the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Dictionary&lt;string, TeamEventStatus&gt;</returns>
        public Dictionary<string, TeamEventStatus> GetEventTeamsStatuses (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = GetEventTeamsStatusesWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for teams competing at the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< Dictionary<string, TeamEventStatus> > GetEventTeamsStatusesWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventTeamsStatuses");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Dictionary<string, TeamEventStatus> >("/event/{event_key}/teams/statuses", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTeamsStatuses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for teams competing at the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, TeamEventStatus>> GetEventTeamsStatusesAsync (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = await GetEventTeamsStatusesAsyncWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for teams competing at the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, TeamEventStatus&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<Dictionary<string, TeamEventStatus>>> GetEventTeamsStatusesAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventTeamsStatuses");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, TeamEventStatus>>("/event/{event_key}/teams/statuses", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTeamsStatuses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of events in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Event&gt;</returns>
        public List<Event> GetEventsByYear (int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Event>> localVarResponse = GetEventsByYearWithHttpInfo(year, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of events in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Event&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<Event> > GetEventsByYearWithHttpInfo (int year, string ifModifiedSince = default(string))
        {
            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Event> >("/events/{year}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventsByYear", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of events in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Event&gt;</returns>
        public async System.Threading.Tasks.Task<List<Event>> GetEventsByYearAsync (int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Event>> localVarResponse = await GetEventsByYearAsyncWithHttpInfo(year, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of events in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<Event>>> GetEventsByYearAsyncWithHttpInfo (int year, string ifModifiedSince = default(string))
        {

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Event>>("/events/{year}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventsByYear", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of event keys in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetEventsByYearKeys (int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = GetEventsByYearKeysWithHttpInfo(year, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of event keys in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<string> > GetEventsByYearKeysWithHttpInfo (int year, string ifModifiedSince = default(string))
        {
            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<string> >("/events/{year}/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventsByYearKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of event keys in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetEventsByYearKeysAsync (int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = await GetEventsByYearKeysAsyncWithHttpInfo(year, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of event keys in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<string>>> GetEventsByYearKeysAsyncWithHttpInfo (int year, string ifModifiedSince = default(string))
        {

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/events/{year}/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventsByYearKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of events in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;EventSimple&gt;</returns>
        public List<EventSimple> GetEventsByYearSimple (int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<EventSimple>> localVarResponse = GetEventsByYearSimpleWithHttpInfo(year, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a short-form list of events in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<EventSimple> > GetEventsByYearSimpleWithHttpInfo (int year, string ifModifiedSince = default(string))
        {
            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<EventSimple> >("/events/{year}/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventsByYearSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of events in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;EventSimple&gt;</returns>
        public async System.Threading.Tasks.Task<List<EventSimple>> GetEventsByYearSimpleAsync (int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<EventSimple>> localVarResponse = await GetEventsByYearSimpleAsyncWithHttpInfo(year, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a short-form list of events in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<EventSimple>>> GetEventsByYearSimpleAsyncWithHttpInfo (int year, string ifModifiedSince = default(string))
        {

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EventSimple>>("/events/{year}/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventsByYearSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of awards the given team won at the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Award&gt;</returns>
        public List<Award> GetTeamEventAwards (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Award>> localVarResponse = GetTeamEventAwardsWithHttpInfo(teamKey, eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of awards the given team won at the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Award&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<Award> > GetTeamEventAwardsWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventAwards");

            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetTeamEventAwards");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Award> >("/team/{team_key}/event/{event_key}/awards", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventAwards", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of awards the given team won at the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Award&gt;</returns>
        public async System.Threading.Tasks.Task<List<Award>> GetTeamEventAwardsAsync (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Award>> localVarResponse = await GetTeamEventAwardsAsyncWithHttpInfo(teamKey, eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of awards the given team won at the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Award&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<Award>>> GetTeamEventAwardsAsyncWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventAwards");

            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetTeamEventAwards");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Award>>("/team/{team_key}/event/{event_key}/awards", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventAwards", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of matches for the given team and event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Match&gt;</returns>
        public List<Match> GetTeamEventMatches (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Match>> localVarResponse = GetTeamEventMatchesWithHttpInfo(teamKey, eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of matches for the given team and event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Match&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<Match> > GetTeamEventMatchesWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventMatches");

            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetTeamEventMatches");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Match> >("/team/{team_key}/event/{event_key}/matches", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventMatches", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of matches for the given team and event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Match&gt;</returns>
        public async System.Threading.Tasks.Task<List<Match>> GetTeamEventMatchesAsync (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Match>> localVarResponse = await GetTeamEventMatchesAsyncWithHttpInfo(teamKey, eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of matches for the given team and event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<Match>>> GetTeamEventMatchesAsyncWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventMatches");

            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetTeamEventMatches");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Match>>("/team/{team_key}/event/{event_key}/matches", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventMatches", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of match keys for matches for the given team and event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetTeamEventMatchesKeys (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = GetTeamEventMatchesKeysWithHttpInfo(teamKey, eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of match keys for matches for the given team and event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<string> > GetTeamEventMatchesKeysWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventMatchesKeys");

            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetTeamEventMatchesKeys");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<string> >("/team/{team_key}/event/{event_key}/matches/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventMatchesKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of match keys for matches for the given team and event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetTeamEventMatchesKeysAsync (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = await GetTeamEventMatchesKeysAsyncWithHttpInfo(teamKey, eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of match keys for matches for the given team and event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<string>>> GetTeamEventMatchesKeysAsyncWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventMatchesKeys");

            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetTeamEventMatchesKeys");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/team/{team_key}/event/{event_key}/matches/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventMatchesKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of matches for the given team and event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Match&gt;</returns>
        public List<Match> GetTeamEventMatchesSimple (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Match>> localVarResponse = GetTeamEventMatchesSimpleWithHttpInfo(teamKey, eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a short-form list of matches for the given team and event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Match&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<Match> > GetTeamEventMatchesSimpleWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventMatchesSimple");

            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetTeamEventMatchesSimple");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Match> >("/team/{team_key}/event/{event_key}/matches/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventMatchesSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of matches for the given team and event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Match&gt;</returns>
        public async System.Threading.Tasks.Task<List<Match>> GetTeamEventMatchesSimpleAsync (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Match>> localVarResponse = await GetTeamEventMatchesSimpleAsyncWithHttpInfo(teamKey, eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a short-form list of matches for the given team and event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<Match>>> GetTeamEventMatchesSimpleAsyncWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventMatchesSimple");

            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetTeamEventMatchesSimple");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Match>>("/team/{team_key}/event/{event_key}/matches/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventMatchesSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the competition rank and status of the team at the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>TeamEventStatus</returns>
        public TeamEventStatus GetTeamEventStatus (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<TeamEventStatus> localVarResponse = GetTeamEventStatusWithHttpInfo(teamKey, eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the competition rank and status of the team at the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of TeamEventStatus</returns>
        public TBAAPI.V3Client.Client.ApiResponse< TeamEventStatus > GetTeamEventStatusWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventStatus");

            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetTeamEventStatus");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TeamEventStatus >("/team/{team_key}/event/{event_key}/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the competition rank and status of the team at the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of TeamEventStatus</returns>
        public async System.Threading.Tasks.Task<TeamEventStatus> GetTeamEventStatusAsync (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<TeamEventStatus> localVarResponse = await GetTeamEventStatusAsyncWithHttpInfo(teamKey, eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets the competition rank and status of the team at the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (TeamEventStatus)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<TeamEventStatus>> GetTeamEventStatusAsyncWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventStatus");

            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetTeamEventStatus");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TeamEventStatus>("/team/{team_key}/event/{event_key}/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of all events this team has competed at.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Event&gt;</returns>
        public List<Event> GetTeamEvents (string teamKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Event>> localVarResponse = GetTeamEventsWithHttpInfo(teamKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of all events this team has competed at.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Event&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<Event> > GetTeamEventsWithHttpInfo (string teamKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEvents");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Event> >("/team/{team_key}/events", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of all events this team has competed at.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Event&gt;</returns>
        public async System.Threading.Tasks.Task<List<Event>> GetTeamEventsAsync (string teamKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Event>> localVarResponse = await GetTeamEventsAsyncWithHttpInfo(teamKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of all events this team has competed at.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<Event>>> GetTeamEventsAsyncWithHttpInfo (string teamKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEvents");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Event>>("/team/{team_key}/events", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Event&gt;</returns>
        public List<Event> GetTeamEventsByYear (string teamKey, int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Event>> localVarResponse = GetTeamEventsByYearWithHttpInfo(teamKey, year, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Event&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<Event> > GetTeamEventsByYearWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventsByYear");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Event> >("/team/{team_key}/events/{year}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventsByYear", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Event&gt;</returns>
        public async System.Threading.Tasks.Task<List<Event>> GetTeamEventsByYearAsync (string teamKey, int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Event>> localVarResponse = await GetTeamEventsByYearAsyncWithHttpInfo(teamKey, year, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<Event>>> GetTeamEventsByYearAsyncWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventsByYear");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Event>>("/team/{team_key}/events/{year}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventsByYear", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of the event keys for events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetTeamEventsByYearKeys (string teamKey, int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = GetTeamEventsByYearKeysWithHttpInfo(teamKey, year, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of the event keys for events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<string> > GetTeamEventsByYearKeysWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventsByYearKeys");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<string> >("/team/{team_key}/events/{year}/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventsByYearKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of the event keys for events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetTeamEventsByYearKeysAsync (string teamKey, int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = await GetTeamEventsByYearKeysAsyncWithHttpInfo(teamKey, year, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of the event keys for events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<string>>> GetTeamEventsByYearKeysAsyncWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventsByYearKeys");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/team/{team_key}/events/{year}/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventsByYearKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;EventSimple&gt;</returns>
        public List<EventSimple> GetTeamEventsByYearSimple (string teamKey, int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<EventSimple>> localVarResponse = GetTeamEventsByYearSimpleWithHttpInfo(teamKey, year, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a short-form list of events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<EventSimple> > GetTeamEventsByYearSimpleWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventsByYearSimple");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<EventSimple> >("/team/{team_key}/events/{year}/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventsByYearSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;EventSimple&gt;</returns>
        public async System.Threading.Tasks.Task<List<EventSimple>> GetTeamEventsByYearSimpleAsync (string teamKey, int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<EventSimple>> localVarResponse = await GetTeamEventsByYearSimpleAsyncWithHttpInfo(teamKey, year, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a short-form list of events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<EventSimple>>> GetTeamEventsByYearSimpleAsyncWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventsByYearSimple");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EventSimple>>("/team/{team_key}/events/{year}/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventsByYearSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of the event keys for all events this team has competed at.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetTeamEventsKeys (string teamKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = GetTeamEventsKeysWithHttpInfo(teamKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of the event keys for all events this team has competed at.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<string> > GetTeamEventsKeysWithHttpInfo (string teamKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventsKeys");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<string> >("/team/{team_key}/events/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventsKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of the event keys for all events this team has competed at.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetTeamEventsKeysAsync (string teamKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = await GetTeamEventsKeysAsyncWithHttpInfo(teamKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of the event keys for all events this team has competed at.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<string>>> GetTeamEventsKeysAsyncWithHttpInfo (string teamKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventsKeys");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/team/{team_key}/events/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventsKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of all events this team has competed at.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;EventSimple&gt;</returns>
        public List<EventSimple> GetTeamEventsSimple (string teamKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<EventSimple>> localVarResponse = GetTeamEventsSimpleWithHttpInfo(teamKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a short-form list of all events this team has competed at.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<EventSimple> > GetTeamEventsSimpleWithHttpInfo (string teamKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventsSimple");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<EventSimple> >("/team/{team_key}/events/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventsSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of all events this team has competed at.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;EventSimple&gt;</returns>
        public async System.Threading.Tasks.Task<List<EventSimple>> GetTeamEventsSimpleAsync (string teamKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<EventSimple>> localVarResponse = await GetTeamEventsSimpleAsyncWithHttpInfo(teamKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a short-form list of all events this team has competed at.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<EventSimple>>> GetTeamEventsSimpleAsyncWithHttpInfo (string teamKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventsSimple");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EventSimple>>("/team/{team_key}/events/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventsSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Dictionary&lt;string, TeamEventStatus&gt;</returns>
        public Dictionary<string, TeamEventStatus> GetTeamEventsStatusesByYear (string teamKey, int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = GetTeamEventsStatusesByYearWithHttpInfo(teamKey, year, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< Dictionary<string, TeamEventStatus> > GetTeamEventsStatusesByYearWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventsStatusesByYear");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Dictionary<string, TeamEventStatus> >("/team/{team_key}/events/{year}/statuses", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventsStatusesByYear", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, TeamEventStatus>> GetTeamEventsStatusesByYearAsync (string teamKey, int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = await GetTeamEventsStatusesByYearAsyncWithHttpInfo(teamKey, year, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, TeamEventStatus&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<Dictionary<string, TeamEventStatus>>> GetTeamEventsStatusesByYearAsyncWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventsStatusesByYear");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, TeamEventStatus>>("/team/{team_key}/events/{year}/statuses", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventsStatusesByYear", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
