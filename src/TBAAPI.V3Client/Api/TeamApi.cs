/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using TBAAPI.V3Client.Client;
using TBAAPI.V3Client.Model;

namespace TBAAPI.V3Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeamApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team district rankings for the given district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;DistrictRanking&gt;</returns>
        List<DistrictRanking> GetDistrictRankings (string districtKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team district rankings for the given district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;DistrictRanking&gt;</returns>
        ApiResponse<List<DistrictRanking>> GetDistrictRankingsWithHttpInfo (string districtKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Team&gt;</returns>
        List<Team> GetDistrictTeams (string districtKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        ApiResponse<List<Team>> GetDistrictTeamsWithHttpInfo (string districtKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetDistrictTeamsKeys (string districtKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetDistrictTeamsKeysWithHttpInfo (string districtKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;TeamSimple&gt;</returns>
        List<TeamSimple> GetDistrictTeamsSimple (string districtKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
        ApiResponse<List<TeamSimple>> GetDistrictTeamsSimpleWithHttpInfo (string districtKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Team&gt;</returns>
        List<Team> GetEventTeams (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        ApiResponse<List<Team>> GetEventTeamsWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetEventTeamsKeys (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetEventTeamsKeysWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;TeamSimple&gt;</returns>
        List<TeamSimple> GetEventTeamsSimple (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
        ApiResponse<List<TeamSimple>> GetEventTeamsSimpleWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for teams competing at the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Dictionary&lt;string, TeamEventStatus&gt;</returns>
        Dictionary<string, TeamEventStatus> GetEventTeamsStatuses (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for teams competing at the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        ApiResponse<Dictionary<string, TeamEventStatus>> GetEventTeamsStatusesWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a &#x60;Team&#x60; object for the team referenced by the given key.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Team</returns>
        Team GetTeam (string teamKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a &#x60;Team&#x60; object for the team referenced by the given key.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> GetTeamWithHttpInfo (string teamKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of awards the given team has won.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Award&gt;</returns>
        List<Award> GetTeamAwards (string teamKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of awards the given team has won.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Award&gt;</returns>
        ApiResponse<List<Award>> GetTeamAwardsWithHttpInfo (string teamKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of awards the given team has won in a given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Award&gt;</returns>
        List<Award> GetTeamAwardsByYear (string teamKey, int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of awards the given team has won in a given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Award&gt;</returns>
        ApiResponse<List<Award>> GetTeamAwardsByYearWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;DistrictList&gt;</returns>
        List<DistrictList> GetTeamDistricts (string teamKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;DistrictList&gt;</returns>
        ApiResponse<List<DistrictList>> GetTeamDistrictsWithHttpInfo (string teamKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of awards the given team won at the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Award&gt;</returns>
        List<Award> GetTeamEventAwards (string teamKey, string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of awards the given team won at the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Award&gt;</returns>
        ApiResponse<List<Award>> GetTeamEventAwardsWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of matches for the given team and event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Match&gt;</returns>
        List<Match> GetTeamEventMatches (string teamKey, string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of matches for the given team and event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Match&gt;</returns>
        ApiResponse<List<Match>> GetTeamEventMatchesWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of match keys for matches for the given team and event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetTeamEventMatchesKeys (string teamKey, string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of match keys for matches for the given team and event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetTeamEventMatchesKeysWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of matches for the given team and event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Match&gt;</returns>
        List<Match> GetTeamEventMatchesSimple (string teamKey, string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of matches for the given team and event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Match&gt;</returns>
        ApiResponse<List<Match>> GetTeamEventMatchesSimpleWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the competition rank and status of the team at the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>TeamEventStatus</returns>
        TeamEventStatus GetTeamEventStatus (string teamKey, string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the competition rank and status of the team at the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of TeamEventStatus</returns>
        ApiResponse<TeamEventStatus> GetTeamEventStatusWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of all events this team has competed at.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Event&gt;</returns>
        List<Event> GetTeamEvents (string teamKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of all events this team has competed at.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Event&gt;</returns>
        ApiResponse<List<Event>> GetTeamEventsWithHttpInfo (string teamKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Event&gt;</returns>
        List<Event> GetTeamEventsByYear (string teamKey, int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Event&gt;</returns>
        ApiResponse<List<Event>> GetTeamEventsByYearWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of the event keys for events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetTeamEventsByYearKeys (string teamKey, int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of the event keys for events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetTeamEventsByYearKeysWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;EventSimple&gt;</returns>
        List<EventSimple> GetTeamEventsByYearSimple (string teamKey, int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
        ApiResponse<List<EventSimple>> GetTeamEventsByYearSimpleWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of the event keys for all events this team has competed at.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetTeamEventsKeys (string teamKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of the event keys for all events this team has competed at.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetTeamEventsKeysWithHttpInfo (string teamKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of all events this team has competed at.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;EventSimple&gt;</returns>
        List<EventSimple> GetTeamEventsSimple (string teamKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of all events this team has competed at.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
        ApiResponse<List<EventSimple>> GetTeamEventsSimpleWithHttpInfo (string teamKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Dictionary&lt;string, TeamEventStatus&gt;</returns>
        Dictionary<string, TeamEventStatus> GetTeamEventsStatusesByYear (string teamKey, int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        ApiResponse<Dictionary<string, TeamEventStatus>> GetTeamEventsStatusesByYearWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of matches for the given team and year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Match&gt;</returns>
        List<Match> GetTeamMatchesByYear (string teamKey, int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of matches for the given team and year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Match&gt;</returns>
        ApiResponse<List<Match>> GetTeamMatchesByYearWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of match keys for matches for the given team and year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetTeamMatchesByYearKeys (string teamKey, int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of match keys for matches for the given team and year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetTeamMatchesByYearKeysWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of matches for the given team and year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;MatchSimple&gt;</returns>
        List<MatchSimple> GetTeamMatchesByYearSimple (string teamKey, int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of matches for the given team and year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;MatchSimple&gt;</returns>
        ApiResponse<List<MatchSimple>> GetTeamMatchesByYearSimpleWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Media (videos / pictures) for the given team and tag.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="mediaTag">Media Tag which describes the Media.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Media&gt;</returns>
        List<Media> GetTeamMediaByTag (string teamKey, string mediaTag, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Media (videos / pictures) for the given team and tag.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="mediaTag">Media Tag which describes the Media.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Media&gt;</returns>
        ApiResponse<List<Media>> GetTeamMediaByTagWithHttpInfo (string teamKey, string mediaTag, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Media (videos / pictures) for the given team, tag and year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="mediaTag">Media Tag which describes the Media.</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Media&gt;</returns>
        List<Media> GetTeamMediaByTagYear (string teamKey, string mediaTag, int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Media (videos / pictures) for the given team, tag and year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="mediaTag">Media Tag which describes the Media.</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Media&gt;</returns>
        ApiResponse<List<Media>> GetTeamMediaByTagYearWithHttpInfo (string teamKey, string mediaTag, int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Media (videos / pictures) for the given team and year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Media&gt;</returns>
        List<Media> GetTeamMediaByYear (string teamKey, int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Media (videos / pictures) for the given team and year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Media&gt;</returns>
        ApiResponse<List<Media>> GetTeamMediaByYearWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of year and robot name pairs for each year that a robot name was provided. Will return an empty array if the team has never named a robot.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;TeamRobot&gt;</returns>
        List<TeamRobot> GetTeamRobots (string teamKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of year and robot name pairs for each year that a robot name was provided. Will return an empty array if the team has never named a robot.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamRobot&gt;</returns>
        ApiResponse<List<TeamRobot>> GetTeamRobotsWithHttpInfo (string teamKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a &#x60;Team_Simple&#x60; object for the team referenced by the given key.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>TeamSimple</returns>
        TeamSimple GetTeamSimple (string teamKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a &#x60;Team_Simple&#x60; object for the team referenced by the given key.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of TeamSimple</returns>
        ApiResponse<TeamSimple> GetTeamSimpleWithHttpInfo (string teamKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Media (social media) for the given team.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Media&gt;</returns>
        List<Media> GetTeamSocialMedia (string teamKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Media (social media) for the given team.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Media&gt;</returns>
        ApiResponse<List<Media>> GetTeamSocialMediaWithHttpInfo (string teamKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of years in which the team participated in at least one competition.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;int&gt;</returns>
        List<int> GetTeamYearsParticipated (string teamKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of years in which the team participated in at least one competition.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;int&gt;</returns>
        ApiResponse<List<int>> GetTeamYearsParticipatedWithHttpInfo (string teamKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Team&gt;</returns>
        List<Team> GetTeams (int pageNum, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        ApiResponse<List<Team>> GetTeamsWithHttpInfo (int pageNum, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Team&gt;</returns>
        List<Team> GetTeamsByYear (int year, int pageNum, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        ApiResponse<List<Team>> GetTeamsByYearWithHttpInfo (int year, int pageNum, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list Team Keys that competed in the given year, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetTeamsByYearKeys (int year, int pageNum, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list Team Keys that competed in the given year, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetTeamsByYearKeysWithHttpInfo (int year, int pageNum, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of short form &#x60;Team_Simple&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;TeamSimple&gt;</returns>
        List<TeamSimple> GetTeamsByYearSimple (int year, int pageNum, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of short form &#x60;Team_Simple&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
        ApiResponse<List<TeamSimple>> GetTeamsByYearSimpleWithHttpInfo (int year, int pageNum, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetTeamsKeys (int pageNum, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetTeamsKeysWithHttpInfo (int pageNum, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of short form &#x60;Team_Simple&#x60; objects, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;TeamSimple&gt;</returns>
        List<TeamSimple> GetTeamsSimple (int pageNum, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of short form &#x60;Team_Simple&#x60; objects, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
        ApiResponse<List<TeamSimple>> GetTeamsSimpleWithHttpInfo (int pageNum, string ifModifiedSince = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeamApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team district rankings for the given district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;DistrictRanking&gt;</returns>
        System.Threading.Tasks.Task<List<DistrictRanking>> GetDistrictRankingsAsync (string districtKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team district rankings for the given district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DistrictRanking&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DistrictRanking>>> GetDistrictRankingsAsyncWithHttpInfo (string districtKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        System.Threading.Tasks.Task<List<Team>> GetDistrictTeamsAsync (string districtKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Team>>> GetDistrictTeamsAsyncWithHttpInfo (string districtKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetDistrictTeamsKeysAsync (string districtKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetDistrictTeamsKeysAsyncWithHttpInfo (string districtKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;TeamSimple&gt;</returns>
        System.Threading.Tasks.Task<List<TeamSimple>> GetDistrictTeamsSimpleAsync (string districtKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamSimple>>> GetDistrictTeamsSimpleAsyncWithHttpInfo (string districtKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        System.Threading.Tasks.Task<List<Team>> GetEventTeamsAsync (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Team>>> GetEventTeamsAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetEventTeamsKeysAsync (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetEventTeamsKeysAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;TeamSimple&gt;</returns>
        System.Threading.Tasks.Task<List<TeamSimple>> GetEventTeamsSimpleAsync (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamSimple>>> GetEventTeamsSimpleAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for teams competing at the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, TeamEventStatus>> GetEventTeamsStatusesAsync (string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for teams competing at the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, TeamEventStatus&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, TeamEventStatus>>> GetEventTeamsStatusesAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a &#x60;Team&#x60; object for the team referenced by the given key.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> GetTeamAsync (string teamKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a &#x60;Team&#x60; object for the team referenced by the given key.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> GetTeamAsyncWithHttpInfo (string teamKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of awards the given team has won.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Award&gt;</returns>
        System.Threading.Tasks.Task<List<Award>> GetTeamAwardsAsync (string teamKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of awards the given team has won.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Award&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Award>>> GetTeamAwardsAsyncWithHttpInfo (string teamKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of awards the given team has won in a given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Award&gt;</returns>
        System.Threading.Tasks.Task<List<Award>> GetTeamAwardsByYearAsync (string teamKey, int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of awards the given team has won in a given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Award&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Award>>> GetTeamAwardsByYearAsyncWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;DistrictList&gt;</returns>
        System.Threading.Tasks.Task<List<DistrictList>> GetTeamDistrictsAsync (string teamKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DistrictList&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DistrictList>>> GetTeamDistrictsAsyncWithHttpInfo (string teamKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of awards the given team won at the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Award&gt;</returns>
        System.Threading.Tasks.Task<List<Award>> GetTeamEventAwardsAsync (string teamKey, string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of awards the given team won at the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Award&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Award>>> GetTeamEventAwardsAsyncWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of matches for the given team and event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Match&gt;</returns>
        System.Threading.Tasks.Task<List<Match>> GetTeamEventMatchesAsync (string teamKey, string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of matches for the given team and event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Match>>> GetTeamEventMatchesAsyncWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of match keys for matches for the given team and event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetTeamEventMatchesKeysAsync (string teamKey, string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of match keys for matches for the given team and event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetTeamEventMatchesKeysAsyncWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of matches for the given team and event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Match&gt;</returns>
        System.Threading.Tasks.Task<List<Match>> GetTeamEventMatchesSimpleAsync (string teamKey, string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of matches for the given team and event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Match>>> GetTeamEventMatchesSimpleAsyncWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the competition rank and status of the team at the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of TeamEventStatus</returns>
        System.Threading.Tasks.Task<TeamEventStatus> GetTeamEventStatusAsync (string teamKey, string eventKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the competition rank and status of the team at the given event.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (TeamEventStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamEventStatus>> GetTeamEventStatusAsyncWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of all events this team has competed at.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Event&gt;</returns>
        System.Threading.Tasks.Task<List<Event>> GetTeamEventsAsync (string teamKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of all events this team has competed at.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Event>>> GetTeamEventsAsyncWithHttpInfo (string teamKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Event&gt;</returns>
        System.Threading.Tasks.Task<List<Event>> GetTeamEventsByYearAsync (string teamKey, int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Event>>> GetTeamEventsByYearAsyncWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of the event keys for events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetTeamEventsByYearKeysAsync (string teamKey, int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of the event keys for events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetTeamEventsByYearKeysAsyncWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;EventSimple&gt;</returns>
        System.Threading.Tasks.Task<List<EventSimple>> GetTeamEventsByYearSimpleAsync (string teamKey, int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EventSimple>>> GetTeamEventsByYearSimpleAsyncWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of the event keys for all events this team has competed at.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetTeamEventsKeysAsync (string teamKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of the event keys for all events this team has competed at.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetTeamEventsKeysAsyncWithHttpInfo (string teamKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of all events this team has competed at.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;EventSimple&gt;</returns>
        System.Threading.Tasks.Task<List<EventSimple>> GetTeamEventsSimpleAsync (string teamKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of all events this team has competed at.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EventSimple>>> GetTeamEventsSimpleAsyncWithHttpInfo (string teamKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, TeamEventStatus>> GetTeamEventsStatusesByYearAsync (string teamKey, int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, TeamEventStatus&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, TeamEventStatus>>> GetTeamEventsStatusesByYearAsyncWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of matches for the given team and year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Match&gt;</returns>
        System.Threading.Tasks.Task<List<Match>> GetTeamMatchesByYearAsync (string teamKey, int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of matches for the given team and year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Match>>> GetTeamMatchesByYearAsyncWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of match keys for matches for the given team and year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetTeamMatchesByYearKeysAsync (string teamKey, int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of match keys for matches for the given team and year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetTeamMatchesByYearKeysAsyncWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of matches for the given team and year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;MatchSimple&gt;</returns>
        System.Threading.Tasks.Task<List<MatchSimple>> GetTeamMatchesByYearSimpleAsync (string teamKey, int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of matches for the given team and year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MatchSimple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MatchSimple>>> GetTeamMatchesByYearSimpleAsyncWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Media (videos / pictures) for the given team and tag.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="mediaTag">Media Tag which describes the Media.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Media&gt;</returns>
        System.Threading.Tasks.Task<List<Media>> GetTeamMediaByTagAsync (string teamKey, string mediaTag, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Media (videos / pictures) for the given team and tag.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="mediaTag">Media Tag which describes the Media.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Media&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Media>>> GetTeamMediaByTagAsyncWithHttpInfo (string teamKey, string mediaTag, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Media (videos / pictures) for the given team, tag and year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="mediaTag">Media Tag which describes the Media.</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Media&gt;</returns>
        System.Threading.Tasks.Task<List<Media>> GetTeamMediaByTagYearAsync (string teamKey, string mediaTag, int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Media (videos / pictures) for the given team, tag and year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="mediaTag">Media Tag which describes the Media.</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Media&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Media>>> GetTeamMediaByTagYearAsyncWithHttpInfo (string teamKey, string mediaTag, int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Media (videos / pictures) for the given team and year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Media&gt;</returns>
        System.Threading.Tasks.Task<List<Media>> GetTeamMediaByYearAsync (string teamKey, int year, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Media (videos / pictures) for the given team and year.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Media&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Media>>> GetTeamMediaByYearAsyncWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of year and robot name pairs for each year that a robot name was provided. Will return an empty array if the team has never named a robot.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;TeamRobot&gt;</returns>
        System.Threading.Tasks.Task<List<TeamRobot>> GetTeamRobotsAsync (string teamKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of year and robot name pairs for each year that a robot name was provided. Will return an empty array if the team has never named a robot.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamRobot&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamRobot>>> GetTeamRobotsAsyncWithHttpInfo (string teamKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a &#x60;Team_Simple&#x60; object for the team referenced by the given key.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of TeamSimple</returns>
        System.Threading.Tasks.Task<TeamSimple> GetTeamSimpleAsync (string teamKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a &#x60;Team_Simple&#x60; object for the team referenced by the given key.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (TeamSimple)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamSimple>> GetTeamSimpleAsyncWithHttpInfo (string teamKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Media (social media) for the given team.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Media&gt;</returns>
        System.Threading.Tasks.Task<List<Media>> GetTeamSocialMediaAsync (string teamKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Media (social media) for the given team.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Media&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Media>>> GetTeamSocialMediaAsyncWithHttpInfo (string teamKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of years in which the team participated in at least one competition.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;int&gt;</returns>
        System.Threading.Tasks.Task<List<int>> GetTeamYearsParticipatedAsync (string teamKey, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of years in which the team participated in at least one competition.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;int&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int>>> GetTeamYearsParticipatedAsyncWithHttpInfo (string teamKey, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        System.Threading.Tasks.Task<List<Team>> GetTeamsAsync (int pageNum, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Team>>> GetTeamsAsyncWithHttpInfo (int pageNum, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        System.Threading.Tasks.Task<List<Team>> GetTeamsByYearAsync (int year, int pageNum, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Team>>> GetTeamsByYearAsyncWithHttpInfo (int year, int pageNum, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list Team Keys that competed in the given year, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetTeamsByYearKeysAsync (int year, int pageNum, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list Team Keys that competed in the given year, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetTeamsByYearKeysAsyncWithHttpInfo (int year, int pageNum, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of short form &#x60;Team_Simple&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;TeamSimple&gt;</returns>
        System.Threading.Tasks.Task<List<TeamSimple>> GetTeamsByYearSimpleAsync (int year, int pageNum, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of short form &#x60;Team_Simple&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamSimple>>> GetTeamsByYearSimpleAsyncWithHttpInfo (int year, int pageNum, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetTeamsKeysAsync (int pageNum, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetTeamsKeysAsyncWithHttpInfo (int pageNum, string ifModifiedSince = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of short form &#x60;Team_Simple&#x60; objects, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;TeamSimple&gt;</returns>
        System.Threading.Tasks.Task<List<TeamSimple>> GetTeamsSimpleAsync (int pageNum, string ifModifiedSince = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of short form &#x60;Team_Simple&#x60; objects, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamSimple>>> GetTeamsSimpleAsyncWithHttpInfo (int pageNum, string ifModifiedSince = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeamApi : ITeamApiSync, ITeamApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TeamApi : ITeamApi
    {
        private TBAAPI.V3Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TeamApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TeamApi(String basePath)
        {
            this.Configuration = TBAAPI.V3Client.Client.Configuration.MergeConfigurations(
                TBAAPI.V3Client.Client.GlobalConfiguration.Instance,
                new TBAAPI.V3Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new TBAAPI.V3Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TBAAPI.V3Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = TBAAPI.V3Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TeamApi(TBAAPI.V3Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TBAAPI.V3Client.Client.Configuration.MergeConfigurations(
                TBAAPI.V3Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new TBAAPI.V3Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TBAAPI.V3Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = TBAAPI.V3Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TeamApi(TBAAPI.V3Client.Client.ISynchronousClient client,TBAAPI.V3Client.Client.IAsynchronousClient asyncClient, TBAAPI.V3Client.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TBAAPI.V3Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TBAAPI.V3Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TBAAPI.V3Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TBAAPI.V3Client.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TBAAPI.V3Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Gets a list of team district rankings for the given district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;DistrictRanking&gt;</returns>
        public List<DistrictRanking> GetDistrictRankings (string districtKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<DistrictRanking>> localVarResponse = GetDistrictRankingsWithHttpInfo(districtKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of team district rankings for the given district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;DistrictRanking&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<DistrictRanking> > GetDistrictRankingsWithHttpInfo (string districtKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'districtKey' when calling TeamApi->GetDistrictRankings");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (districtKey != null)
                localVarRequestOptions.PathParameters.Add("district_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<DistrictRanking> >("/district/{district_key}/rankings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDistrictRankings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of team district rankings for the given district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;DistrictRanking&gt;</returns>
        public async System.Threading.Tasks.Task<List<DistrictRanking>> GetDistrictRankingsAsync (string districtKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<DistrictRanking>> localVarResponse = await GetDistrictRankingsAsyncWithHttpInfo(districtKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of team district rankings for the given district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DistrictRanking&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<DistrictRanking>>> GetDistrictRankingsAsyncWithHttpInfo (string districtKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'districtKey' when calling TeamApi->GetDistrictRankings");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (districtKey != null)
                localVarRequestOptions.PathParameters.Add("district_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DistrictRanking>>("/district/{district_key}/rankings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDistrictRankings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Team&gt;</returns>
        public List<Team> GetDistrictTeams (string districtKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Team>> localVarResponse = GetDistrictTeamsWithHttpInfo(districtKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<Team> > GetDistrictTeamsWithHttpInfo (string districtKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'districtKey' when calling TeamApi->GetDistrictTeams");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (districtKey != null)
                localVarRequestOptions.PathParameters.Add("district_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Team> >("/district/{district_key}/teams", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDistrictTeams", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        public async System.Threading.Tasks.Task<List<Team>> GetDistrictTeamsAsync (string districtKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Team>> localVarResponse = await GetDistrictTeamsAsyncWithHttpInfo(districtKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<Team>>> GetDistrictTeamsAsyncWithHttpInfo (string districtKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'districtKey' when calling TeamApi->GetDistrictTeams");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (districtKey != null)
                localVarRequestOptions.PathParameters.Add("district_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Team>>("/district/{district_key}/teams", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDistrictTeams", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetDistrictTeamsKeys (string districtKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = GetDistrictTeamsKeysWithHttpInfo(districtKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<string> > GetDistrictTeamsKeysWithHttpInfo (string districtKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'districtKey' when calling TeamApi->GetDistrictTeamsKeys");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (districtKey != null)
                localVarRequestOptions.PathParameters.Add("district_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<string> >("/district/{district_key}/teams/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDistrictTeamsKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetDistrictTeamsKeysAsync (string districtKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = await GetDistrictTeamsKeysAsyncWithHttpInfo(districtKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<string>>> GetDistrictTeamsKeysAsyncWithHttpInfo (string districtKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'districtKey' when calling TeamApi->GetDistrictTeamsKeys");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (districtKey != null)
                localVarRequestOptions.PathParameters.Add("district_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/district/{district_key}/teams/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDistrictTeamsKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;TeamSimple&gt;</returns>
        public List<TeamSimple> GetDistrictTeamsSimple (string districtKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<TeamSimple>> localVarResponse = GetDistrictTeamsSimpleWithHttpInfo(districtKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a short-form list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<TeamSimple> > GetDistrictTeamsSimpleWithHttpInfo (string districtKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'districtKey' when calling TeamApi->GetDistrictTeamsSimple");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (districtKey != null)
                localVarRequestOptions.PathParameters.Add("district_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<TeamSimple> >("/district/{district_key}/teams/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDistrictTeamsSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;TeamSimple&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamSimple>> GetDistrictTeamsSimpleAsync (string districtKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<TeamSimple>> localVarResponse = await GetDistrictTeamsSimpleAsyncWithHttpInfo(districtKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a short-form list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<TeamSimple>>> GetDistrictTeamsSimpleAsyncWithHttpInfo (string districtKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'districtKey' when calling TeamApi->GetDistrictTeamsSimple");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (districtKey != null)
                localVarRequestOptions.PathParameters.Add("district_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TeamSimple>>("/district/{district_key}/teams/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDistrictTeamsSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Team&gt;</returns>
        public List<Team> GetEventTeams (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Team>> localVarResponse = GetEventTeamsWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<Team> > GetEventTeamsWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling TeamApi->GetEventTeams");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Team> >("/event/{event_key}/teams", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTeams", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        public async System.Threading.Tasks.Task<List<Team>> GetEventTeamsAsync (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Team>> localVarResponse = await GetEventTeamsAsyncWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<Team>>> GetEventTeamsAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling TeamApi->GetEventTeams");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Team>>("/event/{event_key}/teams", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTeams", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetEventTeamsKeys (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = GetEventTeamsKeysWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<string> > GetEventTeamsKeysWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling TeamApi->GetEventTeamsKeys");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<string> >("/event/{event_key}/teams/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTeamsKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetEventTeamsKeysAsync (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = await GetEventTeamsKeysAsyncWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<string>>> GetEventTeamsKeysAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling TeamApi->GetEventTeamsKeys");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/event/{event_key}/teams/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTeamsKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;TeamSimple&gt;</returns>
        public List<TeamSimple> GetEventTeamsSimple (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<TeamSimple>> localVarResponse = GetEventTeamsSimpleWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<TeamSimple> > GetEventTeamsSimpleWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling TeamApi->GetEventTeamsSimple");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<TeamSimple> >("/event/{event_key}/teams/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTeamsSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;TeamSimple&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamSimple>> GetEventTeamsSimpleAsync (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<TeamSimple>> localVarResponse = await GetEventTeamsSimpleAsyncWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<TeamSimple>>> GetEventTeamsSimpleAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling TeamApi->GetEventTeamsSimple");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TeamSimple>>("/event/{event_key}/teams/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTeamsSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for teams competing at the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Dictionary&lt;string, TeamEventStatus&gt;</returns>
        public Dictionary<string, TeamEventStatus> GetEventTeamsStatuses (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = GetEventTeamsStatusesWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for teams competing at the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< Dictionary<string, TeamEventStatus> > GetEventTeamsStatusesWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling TeamApi->GetEventTeamsStatuses");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Dictionary<string, TeamEventStatus> >("/event/{event_key}/teams/statuses", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTeamsStatuses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for teams competing at the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, TeamEventStatus>> GetEventTeamsStatusesAsync (string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = await GetEventTeamsStatusesAsyncWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for teams competing at the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, TeamEventStatus&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<Dictionary<string, TeamEventStatus>>> GetEventTeamsStatusesAsyncWithHttpInfo (string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling TeamApi->GetEventTeamsStatuses");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, TeamEventStatus>>("/event/{event_key}/teams/statuses", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTeamsStatuses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a &#x60;Team&#x60; object for the team referenced by the given key.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Team</returns>
        public Team GetTeam (string teamKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<Team> localVarResponse = GetTeamWithHttpInfo(teamKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a &#x60;Team&#x60; object for the team referenced by the given key.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of Team</returns>
        public TBAAPI.V3Client.Client.ApiResponse< Team > GetTeamWithHttpInfo (string teamKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeam");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Team >("/team/{team_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeam", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a &#x60;Team&#x60; object for the team referenced by the given key.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> GetTeamAsync (string teamKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<Team> localVarResponse = await GetTeamAsyncWithHttpInfo(teamKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a &#x60;Team&#x60; object for the team referenced by the given key.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<Team>> GetTeamAsyncWithHttpInfo (string teamKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeam");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Team>("/team/{team_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeam", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of awards the given team has won.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Award&gt;</returns>
        public List<Award> GetTeamAwards (string teamKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Award>> localVarResponse = GetTeamAwardsWithHttpInfo(teamKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of awards the given team has won.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Award&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<Award> > GetTeamAwardsWithHttpInfo (string teamKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamAwards");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Award> >("/team/{team_key}/awards", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamAwards", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of awards the given team has won.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Award&gt;</returns>
        public async System.Threading.Tasks.Task<List<Award>> GetTeamAwardsAsync (string teamKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Award>> localVarResponse = await GetTeamAwardsAsyncWithHttpInfo(teamKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of awards the given team has won.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Award&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<Award>>> GetTeamAwardsAsyncWithHttpInfo (string teamKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamAwards");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Award>>("/team/{team_key}/awards", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamAwards", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of awards the given team has won in a given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Award&gt;</returns>
        public List<Award> GetTeamAwardsByYear (string teamKey, int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Award>> localVarResponse = GetTeamAwardsByYearWithHttpInfo(teamKey, year, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of awards the given team has won in a given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Award&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<Award> > GetTeamAwardsByYearWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamAwardsByYear");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Award> >("/team/{team_key}/awards/{year}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamAwardsByYear", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of awards the given team has won in a given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Award&gt;</returns>
        public async System.Threading.Tasks.Task<List<Award>> GetTeamAwardsByYearAsync (string teamKey, int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Award>> localVarResponse = await GetTeamAwardsByYearAsyncWithHttpInfo(teamKey, year, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of awards the given team has won in a given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Award&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<Award>>> GetTeamAwardsByYearAsyncWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamAwardsByYear");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Award>>("/team/{team_key}/awards/{year}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamAwardsByYear", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;DistrictList&gt;</returns>
        public List<DistrictList> GetTeamDistricts (string teamKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<DistrictList>> localVarResponse = GetTeamDistrictsWithHttpInfo(teamKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;DistrictList&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<DistrictList> > GetTeamDistrictsWithHttpInfo (string teamKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamDistricts");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<DistrictList> >("/team/{team_key}/districts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamDistricts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;DistrictList&gt;</returns>
        public async System.Threading.Tasks.Task<List<DistrictList>> GetTeamDistrictsAsync (string teamKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<DistrictList>> localVarResponse = await GetTeamDistrictsAsyncWithHttpInfo(teamKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DistrictList&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<DistrictList>>> GetTeamDistrictsAsyncWithHttpInfo (string teamKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamDistricts");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DistrictList>>("/team/{team_key}/districts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamDistricts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of awards the given team won at the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Award&gt;</returns>
        public List<Award> GetTeamEventAwards (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Award>> localVarResponse = GetTeamEventAwardsWithHttpInfo(teamKey, eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of awards the given team won at the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Award&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<Award> > GetTeamEventAwardsWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamEventAwards");

            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling TeamApi->GetTeamEventAwards");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Award> >("/team/{team_key}/event/{event_key}/awards", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventAwards", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of awards the given team won at the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Award&gt;</returns>
        public async System.Threading.Tasks.Task<List<Award>> GetTeamEventAwardsAsync (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Award>> localVarResponse = await GetTeamEventAwardsAsyncWithHttpInfo(teamKey, eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of awards the given team won at the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Award&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<Award>>> GetTeamEventAwardsAsyncWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamEventAwards");

            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling TeamApi->GetTeamEventAwards");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Award>>("/team/{team_key}/event/{event_key}/awards", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventAwards", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of matches for the given team and event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Match&gt;</returns>
        public List<Match> GetTeamEventMatches (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Match>> localVarResponse = GetTeamEventMatchesWithHttpInfo(teamKey, eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of matches for the given team and event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Match&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<Match> > GetTeamEventMatchesWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamEventMatches");

            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling TeamApi->GetTeamEventMatches");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Match> >("/team/{team_key}/event/{event_key}/matches", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventMatches", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of matches for the given team and event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Match&gt;</returns>
        public async System.Threading.Tasks.Task<List<Match>> GetTeamEventMatchesAsync (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Match>> localVarResponse = await GetTeamEventMatchesAsyncWithHttpInfo(teamKey, eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of matches for the given team and event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<Match>>> GetTeamEventMatchesAsyncWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamEventMatches");

            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling TeamApi->GetTeamEventMatches");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Match>>("/team/{team_key}/event/{event_key}/matches", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventMatches", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of match keys for matches for the given team and event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetTeamEventMatchesKeys (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = GetTeamEventMatchesKeysWithHttpInfo(teamKey, eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of match keys for matches for the given team and event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<string> > GetTeamEventMatchesKeysWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamEventMatchesKeys");

            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling TeamApi->GetTeamEventMatchesKeys");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<string> >("/team/{team_key}/event/{event_key}/matches/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventMatchesKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of match keys for matches for the given team and event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetTeamEventMatchesKeysAsync (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = await GetTeamEventMatchesKeysAsyncWithHttpInfo(teamKey, eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of match keys for matches for the given team and event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<string>>> GetTeamEventMatchesKeysAsyncWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamEventMatchesKeys");

            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling TeamApi->GetTeamEventMatchesKeys");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/team/{team_key}/event/{event_key}/matches/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventMatchesKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of matches for the given team and event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Match&gt;</returns>
        public List<Match> GetTeamEventMatchesSimple (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Match>> localVarResponse = GetTeamEventMatchesSimpleWithHttpInfo(teamKey, eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a short-form list of matches for the given team and event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Match&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<Match> > GetTeamEventMatchesSimpleWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamEventMatchesSimple");

            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling TeamApi->GetTeamEventMatchesSimple");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Match> >("/team/{team_key}/event/{event_key}/matches/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventMatchesSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of matches for the given team and event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Match&gt;</returns>
        public async System.Threading.Tasks.Task<List<Match>> GetTeamEventMatchesSimpleAsync (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Match>> localVarResponse = await GetTeamEventMatchesSimpleAsyncWithHttpInfo(teamKey, eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a short-form list of matches for the given team and event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<Match>>> GetTeamEventMatchesSimpleAsyncWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamEventMatchesSimple");

            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling TeamApi->GetTeamEventMatchesSimple");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Match>>("/team/{team_key}/event/{event_key}/matches/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventMatchesSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the competition rank and status of the team at the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>TeamEventStatus</returns>
        public TeamEventStatus GetTeamEventStatus (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<TeamEventStatus> localVarResponse = GetTeamEventStatusWithHttpInfo(teamKey, eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the competition rank and status of the team at the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of TeamEventStatus</returns>
        public TBAAPI.V3Client.Client.ApiResponse< TeamEventStatus > GetTeamEventStatusWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamEventStatus");

            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling TeamApi->GetTeamEventStatus");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TeamEventStatus >("/team/{team_key}/event/{event_key}/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the competition rank and status of the team at the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of TeamEventStatus</returns>
        public async System.Threading.Tasks.Task<TeamEventStatus> GetTeamEventStatusAsync (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<TeamEventStatus> localVarResponse = await GetTeamEventStatusAsyncWithHttpInfo(teamKey, eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets the competition rank and status of the team at the given event.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (TeamEventStatus)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<TeamEventStatus>> GetTeamEventStatusAsyncWithHttpInfo (string teamKey, string eventKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamEventStatus");

            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'eventKey' when calling TeamApi->GetTeamEventStatus");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (eventKey != null)
                localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TeamEventStatus>("/team/{team_key}/event/{event_key}/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of all events this team has competed at.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Event&gt;</returns>
        public List<Event> GetTeamEvents (string teamKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Event>> localVarResponse = GetTeamEventsWithHttpInfo(teamKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of all events this team has competed at.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Event&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<Event> > GetTeamEventsWithHttpInfo (string teamKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamEvents");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Event> >("/team/{team_key}/events", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of all events this team has competed at.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Event&gt;</returns>
        public async System.Threading.Tasks.Task<List<Event>> GetTeamEventsAsync (string teamKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Event>> localVarResponse = await GetTeamEventsAsyncWithHttpInfo(teamKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of all events this team has competed at.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<Event>>> GetTeamEventsAsyncWithHttpInfo (string teamKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamEvents");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Event>>("/team/{team_key}/events", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Event&gt;</returns>
        public List<Event> GetTeamEventsByYear (string teamKey, int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Event>> localVarResponse = GetTeamEventsByYearWithHttpInfo(teamKey, year, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Event&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<Event> > GetTeamEventsByYearWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamEventsByYear");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Event> >("/team/{team_key}/events/{year}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventsByYear", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Event&gt;</returns>
        public async System.Threading.Tasks.Task<List<Event>> GetTeamEventsByYearAsync (string teamKey, int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Event>> localVarResponse = await GetTeamEventsByYearAsyncWithHttpInfo(teamKey, year, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<Event>>> GetTeamEventsByYearAsyncWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamEventsByYear");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Event>>("/team/{team_key}/events/{year}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventsByYear", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of the event keys for events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetTeamEventsByYearKeys (string teamKey, int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = GetTeamEventsByYearKeysWithHttpInfo(teamKey, year, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of the event keys for events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<string> > GetTeamEventsByYearKeysWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamEventsByYearKeys");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<string> >("/team/{team_key}/events/{year}/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventsByYearKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of the event keys for events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetTeamEventsByYearKeysAsync (string teamKey, int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = await GetTeamEventsByYearKeysAsyncWithHttpInfo(teamKey, year, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of the event keys for events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<string>>> GetTeamEventsByYearKeysAsyncWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamEventsByYearKeys");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/team/{team_key}/events/{year}/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventsByYearKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;EventSimple&gt;</returns>
        public List<EventSimple> GetTeamEventsByYearSimple (string teamKey, int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<EventSimple>> localVarResponse = GetTeamEventsByYearSimpleWithHttpInfo(teamKey, year, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a short-form list of events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<EventSimple> > GetTeamEventsByYearSimpleWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamEventsByYearSimple");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<EventSimple> >("/team/{team_key}/events/{year}/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventsByYearSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;EventSimple&gt;</returns>
        public async System.Threading.Tasks.Task<List<EventSimple>> GetTeamEventsByYearSimpleAsync (string teamKey, int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<EventSimple>> localVarResponse = await GetTeamEventsByYearSimpleAsyncWithHttpInfo(teamKey, year, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a short-form list of events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<EventSimple>>> GetTeamEventsByYearSimpleAsyncWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamEventsByYearSimple");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EventSimple>>("/team/{team_key}/events/{year}/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventsByYearSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of the event keys for all events this team has competed at.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetTeamEventsKeys (string teamKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = GetTeamEventsKeysWithHttpInfo(teamKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of the event keys for all events this team has competed at.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<string> > GetTeamEventsKeysWithHttpInfo (string teamKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamEventsKeys");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<string> >("/team/{team_key}/events/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventsKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of the event keys for all events this team has competed at.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetTeamEventsKeysAsync (string teamKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = await GetTeamEventsKeysAsyncWithHttpInfo(teamKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of the event keys for all events this team has competed at.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<string>>> GetTeamEventsKeysAsyncWithHttpInfo (string teamKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamEventsKeys");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/team/{team_key}/events/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventsKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of all events this team has competed at.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;EventSimple&gt;</returns>
        public List<EventSimple> GetTeamEventsSimple (string teamKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<EventSimple>> localVarResponse = GetTeamEventsSimpleWithHttpInfo(teamKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a short-form list of all events this team has competed at.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<EventSimple> > GetTeamEventsSimpleWithHttpInfo (string teamKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamEventsSimple");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<EventSimple> >("/team/{team_key}/events/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventsSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of all events this team has competed at.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;EventSimple&gt;</returns>
        public async System.Threading.Tasks.Task<List<EventSimple>> GetTeamEventsSimpleAsync (string teamKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<EventSimple>> localVarResponse = await GetTeamEventsSimpleAsyncWithHttpInfo(teamKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a short-form list of all events this team has competed at.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<EventSimple>>> GetTeamEventsSimpleAsyncWithHttpInfo (string teamKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamEventsSimple");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EventSimple>>("/team/{team_key}/events/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventsSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Dictionary&lt;string, TeamEventStatus&gt;</returns>
        public Dictionary<string, TeamEventStatus> GetTeamEventsStatusesByYear (string teamKey, int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = GetTeamEventsStatusesByYearWithHttpInfo(teamKey, year, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< Dictionary<string, TeamEventStatus> > GetTeamEventsStatusesByYearWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamEventsStatusesByYear");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Dictionary<string, TeamEventStatus> >("/team/{team_key}/events/{year}/statuses", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventsStatusesByYear", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, TeamEventStatus>> GetTeamEventsStatusesByYearAsync (string teamKey, int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = await GetTeamEventsStatusesByYearAsyncWithHttpInfo(teamKey, year, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, TeamEventStatus&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<Dictionary<string, TeamEventStatus>>> GetTeamEventsStatusesByYearAsyncWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamEventsStatusesByYear");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, TeamEventStatus>>("/team/{team_key}/events/{year}/statuses", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventsStatusesByYear", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of matches for the given team and year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Match&gt;</returns>
        public List<Match> GetTeamMatchesByYear (string teamKey, int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Match>> localVarResponse = GetTeamMatchesByYearWithHttpInfo(teamKey, year, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of matches for the given team and year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Match&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<Match> > GetTeamMatchesByYearWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamMatchesByYear");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Match> >("/team/{team_key}/matches/{year}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamMatchesByYear", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of matches for the given team and year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Match&gt;</returns>
        public async System.Threading.Tasks.Task<List<Match>> GetTeamMatchesByYearAsync (string teamKey, int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Match>> localVarResponse = await GetTeamMatchesByYearAsyncWithHttpInfo(teamKey, year, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of matches for the given team and year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<Match>>> GetTeamMatchesByYearAsyncWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamMatchesByYear");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Match>>("/team/{team_key}/matches/{year}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamMatchesByYear", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of match keys for matches for the given team and year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetTeamMatchesByYearKeys (string teamKey, int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = GetTeamMatchesByYearKeysWithHttpInfo(teamKey, year, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of match keys for matches for the given team and year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<string> > GetTeamMatchesByYearKeysWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamMatchesByYearKeys");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<string> >("/team/{team_key}/matches/{year}/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamMatchesByYearKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of match keys for matches for the given team and year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetTeamMatchesByYearKeysAsync (string teamKey, int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = await GetTeamMatchesByYearKeysAsyncWithHttpInfo(teamKey, year, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of match keys for matches for the given team and year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<string>>> GetTeamMatchesByYearKeysAsyncWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamMatchesByYearKeys");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/team/{team_key}/matches/{year}/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamMatchesByYearKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of matches for the given team and year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;MatchSimple&gt;</returns>
        public List<MatchSimple> GetTeamMatchesByYearSimple (string teamKey, int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<MatchSimple>> localVarResponse = GetTeamMatchesByYearSimpleWithHttpInfo(teamKey, year, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a short-form list of matches for the given team and year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;MatchSimple&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<MatchSimple> > GetTeamMatchesByYearSimpleWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamMatchesByYearSimple");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<MatchSimple> >("/team/{team_key}/matches/{year}/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamMatchesByYearSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of matches for the given team and year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;MatchSimple&gt;</returns>
        public async System.Threading.Tasks.Task<List<MatchSimple>> GetTeamMatchesByYearSimpleAsync (string teamKey, int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<MatchSimple>> localVarResponse = await GetTeamMatchesByYearSimpleAsyncWithHttpInfo(teamKey, year, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a short-form list of matches for the given team and year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MatchSimple&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<MatchSimple>>> GetTeamMatchesByYearSimpleAsyncWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamMatchesByYearSimple");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MatchSimple>>("/team/{team_key}/matches/{year}/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamMatchesByYearSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of Media (videos / pictures) for the given team and tag.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="mediaTag">Media Tag which describes the Media.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Media&gt;</returns>
        public List<Media> GetTeamMediaByTag (string teamKey, string mediaTag, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Media>> localVarResponse = GetTeamMediaByTagWithHttpInfo(teamKey, mediaTag, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of Media (videos / pictures) for the given team and tag.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="mediaTag">Media Tag which describes the Media.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Media&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<Media> > GetTeamMediaByTagWithHttpInfo (string teamKey, string mediaTag, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamMediaByTag");

            // verify the required parameter 'mediaTag' is set
            if (mediaTag == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'mediaTag' when calling TeamApi->GetTeamMediaByTag");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (mediaTag != null)
                localVarRequestOptions.PathParameters.Add("media_tag", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(mediaTag)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Media> >("/team/{team_key}/media/tag/{media_tag}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamMediaByTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of Media (videos / pictures) for the given team and tag.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="mediaTag">Media Tag which describes the Media.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Media&gt;</returns>
        public async System.Threading.Tasks.Task<List<Media>> GetTeamMediaByTagAsync (string teamKey, string mediaTag, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Media>> localVarResponse = await GetTeamMediaByTagAsyncWithHttpInfo(teamKey, mediaTag, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of Media (videos / pictures) for the given team and tag.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="mediaTag">Media Tag which describes the Media.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Media&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<Media>>> GetTeamMediaByTagAsyncWithHttpInfo (string teamKey, string mediaTag, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamMediaByTag");

            // verify the required parameter 'mediaTag' is set
            if (mediaTag == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'mediaTag' when calling TeamApi->GetTeamMediaByTag");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (mediaTag != null)
                localVarRequestOptions.PathParameters.Add("media_tag", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(mediaTag)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Media>>("/team/{team_key}/media/tag/{media_tag}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamMediaByTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of Media (videos / pictures) for the given team, tag and year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="mediaTag">Media Tag which describes the Media.</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Media&gt;</returns>
        public List<Media> GetTeamMediaByTagYear (string teamKey, string mediaTag, int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Media>> localVarResponse = GetTeamMediaByTagYearWithHttpInfo(teamKey, mediaTag, year, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of Media (videos / pictures) for the given team, tag and year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="mediaTag">Media Tag which describes the Media.</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Media&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<Media> > GetTeamMediaByTagYearWithHttpInfo (string teamKey, string mediaTag, int year, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamMediaByTagYear");

            // verify the required parameter 'mediaTag' is set
            if (mediaTag == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'mediaTag' when calling TeamApi->GetTeamMediaByTagYear");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (mediaTag != null)
                localVarRequestOptions.PathParameters.Add("media_tag", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(mediaTag)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Media> >("/team/{team_key}/media/tag/{media_tag}/{year}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamMediaByTagYear", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of Media (videos / pictures) for the given team, tag and year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="mediaTag">Media Tag which describes the Media.</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Media&gt;</returns>
        public async System.Threading.Tasks.Task<List<Media>> GetTeamMediaByTagYearAsync (string teamKey, string mediaTag, int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Media>> localVarResponse = await GetTeamMediaByTagYearAsyncWithHttpInfo(teamKey, mediaTag, year, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of Media (videos / pictures) for the given team, tag and year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="mediaTag">Media Tag which describes the Media.</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Media&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<Media>>> GetTeamMediaByTagYearAsyncWithHttpInfo (string teamKey, string mediaTag, int year, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamMediaByTagYear");

            // verify the required parameter 'mediaTag' is set
            if (mediaTag == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'mediaTag' when calling TeamApi->GetTeamMediaByTagYear");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (mediaTag != null)
                localVarRequestOptions.PathParameters.Add("media_tag", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(mediaTag)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Media>>("/team/{team_key}/media/tag/{media_tag}/{year}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamMediaByTagYear", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of Media (videos / pictures) for the given team and year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Media&gt;</returns>
        public List<Media> GetTeamMediaByYear (string teamKey, int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Media>> localVarResponse = GetTeamMediaByYearWithHttpInfo(teamKey, year, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of Media (videos / pictures) for the given team and year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Media&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<Media> > GetTeamMediaByYearWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamMediaByYear");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Media> >("/team/{team_key}/media/{year}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamMediaByYear", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of Media (videos / pictures) for the given team and year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Media&gt;</returns>
        public async System.Threading.Tasks.Task<List<Media>> GetTeamMediaByYearAsync (string teamKey, int year, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Media>> localVarResponse = await GetTeamMediaByYearAsyncWithHttpInfo(teamKey, year, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of Media (videos / pictures) for the given team and year.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Media&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<Media>>> GetTeamMediaByYearAsyncWithHttpInfo (string teamKey, int year, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamMediaByYear");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Media>>("/team/{team_key}/media/{year}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamMediaByYear", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of year and robot name pairs for each year that a robot name was provided. Will return an empty array if the team has never named a robot.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;TeamRobot&gt;</returns>
        public List<TeamRobot> GetTeamRobots (string teamKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<TeamRobot>> localVarResponse = GetTeamRobotsWithHttpInfo(teamKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of year and robot name pairs for each year that a robot name was provided. Will return an empty array if the team has never named a robot.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamRobot&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<TeamRobot> > GetTeamRobotsWithHttpInfo (string teamKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamRobots");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<TeamRobot> >("/team/{team_key}/robots", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamRobots", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of year and robot name pairs for each year that a robot name was provided. Will return an empty array if the team has never named a robot.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;TeamRobot&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamRobot>> GetTeamRobotsAsync (string teamKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<TeamRobot>> localVarResponse = await GetTeamRobotsAsyncWithHttpInfo(teamKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of year and robot name pairs for each year that a robot name was provided. Will return an empty array if the team has never named a robot.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamRobot&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<TeamRobot>>> GetTeamRobotsAsyncWithHttpInfo (string teamKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamRobots");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TeamRobot>>("/team/{team_key}/robots", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamRobots", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a &#x60;Team_Simple&#x60; object for the team referenced by the given key.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>TeamSimple</returns>
        public TeamSimple GetTeamSimple (string teamKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<TeamSimple> localVarResponse = GetTeamSimpleWithHttpInfo(teamKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a &#x60;Team_Simple&#x60; object for the team referenced by the given key.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of TeamSimple</returns>
        public TBAAPI.V3Client.Client.ApiResponse< TeamSimple > GetTeamSimpleWithHttpInfo (string teamKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamSimple");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TeamSimple >("/team/{team_key}/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a &#x60;Team_Simple&#x60; object for the team referenced by the given key.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of TeamSimple</returns>
        public async System.Threading.Tasks.Task<TeamSimple> GetTeamSimpleAsync (string teamKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<TeamSimple> localVarResponse = await GetTeamSimpleAsyncWithHttpInfo(teamKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a &#x60;Team_Simple&#x60; object for the team referenced by the given key.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (TeamSimple)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<TeamSimple>> GetTeamSimpleAsyncWithHttpInfo (string teamKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamSimple");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TeamSimple>("/team/{team_key}/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of Media (social media) for the given team.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Media&gt;</returns>
        public List<Media> GetTeamSocialMedia (string teamKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Media>> localVarResponse = GetTeamSocialMediaWithHttpInfo(teamKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of Media (social media) for the given team.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Media&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<Media> > GetTeamSocialMediaWithHttpInfo (string teamKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamSocialMedia");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Media> >("/team/{team_key}/social_media", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamSocialMedia", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of Media (social media) for the given team.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Media&gt;</returns>
        public async System.Threading.Tasks.Task<List<Media>> GetTeamSocialMediaAsync (string teamKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Media>> localVarResponse = await GetTeamSocialMediaAsyncWithHttpInfo(teamKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of Media (social media) for the given team.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Media&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<Media>>> GetTeamSocialMediaAsyncWithHttpInfo (string teamKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamSocialMedia");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Media>>("/team/{team_key}/social_media", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamSocialMedia", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of years in which the team participated in at least one competition.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;int&gt;</returns>
        public List<int> GetTeamYearsParticipated (string teamKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<int>> localVarResponse = GetTeamYearsParticipatedWithHttpInfo(teamKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of years in which the team participated in at least one competition.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;int&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<int> > GetTeamYearsParticipatedWithHttpInfo (string teamKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamYearsParticipated");

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<int> >("/team/{team_key}/years_participated", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamYearsParticipated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of years in which the team participated in at least one competition.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;int&gt;</returns>
        public async System.Threading.Tasks.Task<List<int>> GetTeamYearsParticipatedAsync (string teamKey, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<int>> localVarResponse = await GetTeamYearsParticipatedAsyncWithHttpInfo(teamKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of years in which the team participated in at least one competition.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;int&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<int>>> GetTeamYearsParticipatedAsyncWithHttpInfo (string teamKey, string ifModifiedSince = default(string))
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new TBAAPI.V3Client.Client.ApiException(400, "Missing required parameter 'teamKey' when calling TeamApi->GetTeamYearsParticipated");


            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamKey != null)
                localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<int>>("/team/{team_key}/years_participated", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamYearsParticipated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects, paginated in groups of 500.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Team&gt;</returns>
        public List<Team> GetTeams (int pageNum, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Team>> localVarResponse = GetTeamsWithHttpInfo(pageNum, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects, paginated in groups of 500.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<Team> > GetTeamsWithHttpInfo (int pageNum, string ifModifiedSince = default(string))
        {
            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("page_num", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(pageNum)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Team> >("/teams/{page_num}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeams", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects, paginated in groups of 500.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        public async System.Threading.Tasks.Task<List<Team>> GetTeamsAsync (int pageNum, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Team>> localVarResponse = await GetTeamsAsyncWithHttpInfo(pageNum, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects, paginated in groups of 500.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<Team>>> GetTeamsAsyncWithHttpInfo (int pageNum, string ifModifiedSince = default(string))
        {

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("page_num", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(pageNum)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Team>>("/teams/{page_num}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeams", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Team&gt;</returns>
        public List<Team> GetTeamsByYear (int year, int pageNum, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Team>> localVarResponse = GetTeamsByYearWithHttpInfo(year, pageNum, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<Team> > GetTeamsByYearWithHttpInfo (int year, int pageNum, string ifModifiedSince = default(string))
        {
            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("page_num", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(pageNum)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Team> >("/teams/{year}/{page_num}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamsByYear", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        public async System.Threading.Tasks.Task<List<Team>> GetTeamsByYearAsync (int year, int pageNum, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<Team>> localVarResponse = await GetTeamsByYearAsyncWithHttpInfo(year, pageNum, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<Team>>> GetTeamsByYearAsyncWithHttpInfo (int year, int pageNum, string ifModifiedSince = default(string))
        {

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("page_num", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(pageNum)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Team>>("/teams/{year}/{page_num}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamsByYear", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list Team Keys that competed in the given year, paginated in groups of 500.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetTeamsByYearKeys (int year, int pageNum, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = GetTeamsByYearKeysWithHttpInfo(year, pageNum, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list Team Keys that competed in the given year, paginated in groups of 500.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<string> > GetTeamsByYearKeysWithHttpInfo (int year, int pageNum, string ifModifiedSince = default(string))
        {
            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("page_num", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(pageNum)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<string> >("/teams/{year}/{page_num}/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamsByYearKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list Team Keys that competed in the given year, paginated in groups of 500.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetTeamsByYearKeysAsync (int year, int pageNum, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = await GetTeamsByYearKeysAsyncWithHttpInfo(year, pageNum, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list Team Keys that competed in the given year, paginated in groups of 500.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<string>>> GetTeamsByYearKeysAsyncWithHttpInfo (int year, int pageNum, string ifModifiedSince = default(string))
        {

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("page_num", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(pageNum)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/teams/{year}/{page_num}/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamsByYearKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of short form &#x60;Team_Simple&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;TeamSimple&gt;</returns>
        public List<TeamSimple> GetTeamsByYearSimple (int year, int pageNum, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<TeamSimple>> localVarResponse = GetTeamsByYearSimpleWithHttpInfo(year, pageNum, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of short form &#x60;Team_Simple&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<TeamSimple> > GetTeamsByYearSimpleWithHttpInfo (int year, int pageNum, string ifModifiedSince = default(string))
        {
            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("page_num", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(pageNum)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<TeamSimple> >("/teams/{year}/{page_num}/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamsByYearSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of short form &#x60;Team_Simple&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;TeamSimple&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamSimple>> GetTeamsByYearSimpleAsync (int year, int pageNum, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<TeamSimple>> localVarResponse = await GetTeamsByYearSimpleAsyncWithHttpInfo(year, pageNum, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of short form &#x60;Team_Simple&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<TeamSimple>>> GetTeamsByYearSimpleAsyncWithHttpInfo (int year, int pageNum, string ifModifiedSince = default(string))
        {

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("page_num", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(pageNum)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TeamSimple>>("/teams/{year}/{page_num}/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamsByYearSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetTeamsKeys (int pageNum, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = GetTeamsKeysWithHttpInfo(pageNum, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<string> > GetTeamsKeysWithHttpInfo (int pageNum, string ifModifiedSince = default(string))
        {
            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("page_num", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(pageNum)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<string> >("/teams/{page_num}/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamsKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetTeamsKeysAsync (int pageNum, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<string>> localVarResponse = await GetTeamsKeysAsyncWithHttpInfo(pageNum, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<string>>> GetTeamsKeysAsyncWithHttpInfo (int pageNum, string ifModifiedSince = default(string))
        {

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("page_num", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(pageNum)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/teams/{page_num}/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamsKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of short form &#x60;Team_Simple&#x60; objects, paginated in groups of 500.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;TeamSimple&gt;</returns>
        public List<TeamSimple> GetTeamsSimple (int pageNum, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<TeamSimple>> localVarResponse = GetTeamsSimpleWithHttpInfo(pageNum, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of short form &#x60;Team_Simple&#x60; objects, paginated in groups of 500.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
        public TBAAPI.V3Client.Client.ApiResponse< List<TeamSimple> > GetTeamsSimpleWithHttpInfo (int pageNum, string ifModifiedSince = default(string))
        {
            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("page_num", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(pageNum)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<TeamSimple> >("/teams/{page_num}/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamsSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of short form &#x60;Team_Simple&#x60; objects, paginated in groups of 500.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;TeamSimple&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamSimple>> GetTeamsSimpleAsync (int pageNum, string ifModifiedSince = default(string))
        {
             TBAAPI.V3Client.Client.ApiResponse<List<TeamSimple>> localVarResponse = await GetTeamsSimpleAsyncWithHttpInfo(pageNum, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of short form &#x60;Team_Simple&#x60; objects, paginated in groups of 500.
        /// </summary>
        /// <exception cref="TBAAPI.V3Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
        public async System.Threading.Tasks.Task<TBAAPI.V3Client.Client.ApiResponse<List<TeamSimple>>> GetTeamsSimpleAsyncWithHttpInfo (int pageNum, string ifModifiedSince = default(string))
        {

            TBAAPI.V3Client.Client.RequestOptions localVarRequestOptions = new TBAAPI.V3Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("page_num", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(pageNum)); // path parameter
            if (ifModifiedSince != null)
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TeamSimple>>("/teams/{page_num}/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamsSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
