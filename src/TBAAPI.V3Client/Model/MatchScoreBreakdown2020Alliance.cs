/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TBAAPI.V3Client.Client.OpenAPIDateConverter;

namespace TBAAPI.V3Client.Model
{
    /// <summary>
    /// MatchScoreBreakdown2020Alliance
    /// </summary>
    [DataContract]
    public partial class MatchScoreBreakdown2020Alliance :  IEquatable<MatchScoreBreakdown2020Alliance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchScoreBreakdown2020Alliance" /> class.
        /// </summary>
        /// <param name="initLineRobot1">initLineRobot1.</param>
        /// <param name="endgameRobot1">endgameRobot1.</param>
        /// <param name="initLineRobot2">initLineRobot2.</param>
        /// <param name="endgameRobot2">endgameRobot2.</param>
        /// <param name="initLineRobot3">initLineRobot3.</param>
        /// <param name="endgameRobot3">endgameRobot3.</param>
        /// <param name="autoCellsBottom">autoCellsBottom.</param>
        /// <param name="autoCellsOuter">autoCellsOuter.</param>
        /// <param name="autoCellsInner">autoCellsInner.</param>
        /// <param name="teleopCellsBottom">teleopCellsBottom.</param>
        /// <param name="teleopCellsOuter">teleopCellsOuter.</param>
        /// <param name="teleopCellsInner">teleopCellsInner.</param>
        /// <param name="stage1Activated">stage1Activated.</param>
        /// <param name="stage2Activated">stage2Activated.</param>
        /// <param name="stage3Activated">stage3Activated.</param>
        /// <param name="stage3TargetColor">stage3TargetColor.</param>
        /// <param name="endgameRungIsLevel">endgameRungIsLevel.</param>
        /// <param name="autoInitLinePoints">autoInitLinePoints.</param>
        /// <param name="autoCellPoints">autoCellPoints.</param>
        /// <param name="autoPoints">autoPoints.</param>
        /// <param name="teleopCellPoints">teleopCellPoints.</param>
        /// <param name="controlPanelPoints">controlPanelPoints.</param>
        /// <param name="endgamePoints">endgamePoints.</param>
        /// <param name="teleopPoints">teleopPoints.</param>
        /// <param name="shieldOperationalRankingPoint">shieldOperationalRankingPoint.</param>
        /// <param name="shieldEnergizedRankingPoint">shieldEnergizedRankingPoint.</param>
        /// <param name="tbaShieldEnergizedRankingPointFromFoul">Unofficial TBA-computed value that indicates whether the shieldEnergizedRankingPoint was earned normally or awarded due to a foul..</param>
        /// <param name="tbaNumRobotsHanging">Unofficial TBA-computed value that counts the number of robots who were hanging at the end of the match..</param>
        /// <param name="foulCount">foulCount.</param>
        /// <param name="techFoulCount">techFoulCount.</param>
        /// <param name="adjustPoints">adjustPoints.</param>
        /// <param name="foulPoints">foulPoints.</param>
        /// <param name="rp">rp.</param>
        /// <param name="totalPoints">totalPoints.</param>
        public MatchScoreBreakdown2020Alliance(string initLineRobot1 = default(string), string endgameRobot1 = default(string), string initLineRobot2 = default(string), string endgameRobot2 = default(string), string initLineRobot3 = default(string), string endgameRobot3 = default(string), int autoCellsBottom = default(int), int autoCellsOuter = default(int), int autoCellsInner = default(int), int teleopCellsBottom = default(int), int teleopCellsOuter = default(int), int teleopCellsInner = default(int), bool stage1Activated = default(bool), bool stage2Activated = default(bool), bool stage3Activated = default(bool), string stage3TargetColor = default(string), string endgameRungIsLevel = default(string), int autoInitLinePoints = default(int), int autoCellPoints = default(int), int autoPoints = default(int), int teleopCellPoints = default(int), int controlPanelPoints = default(int), int endgamePoints = default(int), int teleopPoints = default(int), bool shieldOperationalRankingPoint = default(bool), bool shieldEnergizedRankingPoint = default(bool), bool tbaShieldEnergizedRankingPointFromFoul = default(bool), int tbaNumRobotsHanging = default(int), int foulCount = default(int), int techFoulCount = default(int), int adjustPoints = default(int), int foulPoints = default(int), int rp = default(int), int totalPoints = default(int))
        {
            this.InitLineRobot1 = initLineRobot1;
            this.EndgameRobot1 = endgameRobot1;
            this.InitLineRobot2 = initLineRobot2;
            this.EndgameRobot2 = endgameRobot2;
            this.InitLineRobot3 = initLineRobot3;
            this.EndgameRobot3 = endgameRobot3;
            this.AutoCellsBottom = autoCellsBottom;
            this.AutoCellsOuter = autoCellsOuter;
            this.AutoCellsInner = autoCellsInner;
            this.TeleopCellsBottom = teleopCellsBottom;
            this.TeleopCellsOuter = teleopCellsOuter;
            this.TeleopCellsInner = teleopCellsInner;
            this.Stage1Activated = stage1Activated;
            this.Stage2Activated = stage2Activated;
            this.Stage3Activated = stage3Activated;
            this.Stage3TargetColor = stage3TargetColor;
            this.EndgameRungIsLevel = endgameRungIsLevel;
            this.AutoInitLinePoints = autoInitLinePoints;
            this.AutoCellPoints = autoCellPoints;
            this.AutoPoints = autoPoints;
            this.TeleopCellPoints = teleopCellPoints;
            this.ControlPanelPoints = controlPanelPoints;
            this.EndgamePoints = endgamePoints;
            this.TeleopPoints = teleopPoints;
            this.ShieldOperationalRankingPoint = shieldOperationalRankingPoint;
            this.ShieldEnergizedRankingPoint = shieldEnergizedRankingPoint;
            this.TbaShieldEnergizedRankingPointFromFoul = tbaShieldEnergizedRankingPointFromFoul;
            this.TbaNumRobotsHanging = tbaNumRobotsHanging;
            this.FoulCount = foulCount;
            this.TechFoulCount = techFoulCount;
            this.AdjustPoints = adjustPoints;
            this.FoulPoints = foulPoints;
            this.Rp = rp;
            this.TotalPoints = totalPoints;
        }
        
        /// <summary>
        /// Gets or Sets InitLineRobot1
        /// </summary>
        [DataMember(Name="initLineRobot1", EmitDefaultValue=false)]
        public string InitLineRobot1 { get; set; }

        /// <summary>
        /// Gets or Sets EndgameRobot1
        /// </summary>
        [DataMember(Name="endgameRobot1", EmitDefaultValue=false)]
        public string EndgameRobot1 { get; set; }

        /// <summary>
        /// Gets or Sets InitLineRobot2
        /// </summary>
        [DataMember(Name="initLineRobot2", EmitDefaultValue=false)]
        public string InitLineRobot2 { get; set; }

        /// <summary>
        /// Gets or Sets EndgameRobot2
        /// </summary>
        [DataMember(Name="endgameRobot2", EmitDefaultValue=false)]
        public string EndgameRobot2 { get; set; }

        /// <summary>
        /// Gets or Sets InitLineRobot3
        /// </summary>
        [DataMember(Name="initLineRobot3", EmitDefaultValue=false)]
        public string InitLineRobot3 { get; set; }

        /// <summary>
        /// Gets or Sets EndgameRobot3
        /// </summary>
        [DataMember(Name="endgameRobot3", EmitDefaultValue=false)]
        public string EndgameRobot3 { get; set; }

        /// <summary>
        /// Gets or Sets AutoCellsBottom
        /// </summary>
        [DataMember(Name="autoCellsBottom", EmitDefaultValue=false)]
        public int AutoCellsBottom { get; set; }

        /// <summary>
        /// Gets or Sets AutoCellsOuter
        /// </summary>
        [DataMember(Name="autoCellsOuter", EmitDefaultValue=false)]
        public int AutoCellsOuter { get; set; }

        /// <summary>
        /// Gets or Sets AutoCellsInner
        /// </summary>
        [DataMember(Name="autoCellsInner", EmitDefaultValue=false)]
        public int AutoCellsInner { get; set; }

        /// <summary>
        /// Gets or Sets TeleopCellsBottom
        /// </summary>
        [DataMember(Name="teleopCellsBottom", EmitDefaultValue=false)]
        public int TeleopCellsBottom { get; set; }

        /// <summary>
        /// Gets or Sets TeleopCellsOuter
        /// </summary>
        [DataMember(Name="teleopCellsOuter", EmitDefaultValue=false)]
        public int TeleopCellsOuter { get; set; }

        /// <summary>
        /// Gets or Sets TeleopCellsInner
        /// </summary>
        [DataMember(Name="teleopCellsInner", EmitDefaultValue=false)]
        public int TeleopCellsInner { get; set; }

        /// <summary>
        /// Gets or Sets Stage1Activated
        /// </summary>
        [DataMember(Name="stage1Activated", EmitDefaultValue=false)]
        public bool Stage1Activated { get; set; }

        /// <summary>
        /// Gets or Sets Stage2Activated
        /// </summary>
        [DataMember(Name="stage2Activated", EmitDefaultValue=false)]
        public bool Stage2Activated { get; set; }

        /// <summary>
        /// Gets or Sets Stage3Activated
        /// </summary>
        [DataMember(Name="stage3Activated", EmitDefaultValue=false)]
        public bool Stage3Activated { get; set; }

        /// <summary>
        /// Gets or Sets Stage3TargetColor
        /// </summary>
        [DataMember(Name="stage3TargetColor", EmitDefaultValue=false)]
        public string Stage3TargetColor { get; set; }

        /// <summary>
        /// Gets or Sets EndgameRungIsLevel
        /// </summary>
        [DataMember(Name="endgameRungIsLevel", EmitDefaultValue=false)]
        public string EndgameRungIsLevel { get; set; }

        /// <summary>
        /// Gets or Sets AutoInitLinePoints
        /// </summary>
        [DataMember(Name="autoInitLinePoints", EmitDefaultValue=false)]
        public int AutoInitLinePoints { get; set; }

        /// <summary>
        /// Gets or Sets AutoCellPoints
        /// </summary>
        [DataMember(Name="autoCellPoints", EmitDefaultValue=false)]
        public int AutoCellPoints { get; set; }

        /// <summary>
        /// Gets or Sets AutoPoints
        /// </summary>
        [DataMember(Name="autoPoints", EmitDefaultValue=false)]
        public int AutoPoints { get; set; }

        /// <summary>
        /// Gets or Sets TeleopCellPoints
        /// </summary>
        [DataMember(Name="teleopCellPoints", EmitDefaultValue=false)]
        public int TeleopCellPoints { get; set; }

        /// <summary>
        /// Gets or Sets ControlPanelPoints
        /// </summary>
        [DataMember(Name="controlPanelPoints", EmitDefaultValue=false)]
        public int ControlPanelPoints { get; set; }

        /// <summary>
        /// Gets or Sets EndgamePoints
        /// </summary>
        [DataMember(Name="endgamePoints", EmitDefaultValue=false)]
        public int EndgamePoints { get; set; }

        /// <summary>
        /// Gets or Sets TeleopPoints
        /// </summary>
        [DataMember(Name="teleopPoints", EmitDefaultValue=false)]
        public int TeleopPoints { get; set; }

        /// <summary>
        /// Gets or Sets ShieldOperationalRankingPoint
        /// </summary>
        [DataMember(Name="shieldOperationalRankingPoint", EmitDefaultValue=false)]
        public bool ShieldOperationalRankingPoint { get; set; }

        /// <summary>
        /// Gets or Sets ShieldEnergizedRankingPoint
        /// </summary>
        [DataMember(Name="shieldEnergizedRankingPoint", EmitDefaultValue=false)]
        public bool ShieldEnergizedRankingPoint { get; set; }

        /// <summary>
        /// Unofficial TBA-computed value that indicates whether the shieldEnergizedRankingPoint was earned normally or awarded due to a foul.
        /// </summary>
        /// <value>Unofficial TBA-computed value that indicates whether the shieldEnergizedRankingPoint was earned normally or awarded due to a foul.</value>
        [DataMember(Name="tba_shieldEnergizedRankingPointFromFoul", EmitDefaultValue=false)]
        public bool TbaShieldEnergizedRankingPointFromFoul { get; set; }

        /// <summary>
        /// Unofficial TBA-computed value that counts the number of robots who were hanging at the end of the match.
        /// </summary>
        /// <value>Unofficial TBA-computed value that counts the number of robots who were hanging at the end of the match.</value>
        [DataMember(Name="tba_numRobotsHanging", EmitDefaultValue=false)]
        public int TbaNumRobotsHanging { get; set; }

        /// <summary>
        /// Gets or Sets FoulCount
        /// </summary>
        [DataMember(Name="foulCount", EmitDefaultValue=false)]
        public int FoulCount { get; set; }

        /// <summary>
        /// Gets or Sets TechFoulCount
        /// </summary>
        [DataMember(Name="techFoulCount", EmitDefaultValue=false)]
        public int TechFoulCount { get; set; }

        /// <summary>
        /// Gets or Sets AdjustPoints
        /// </summary>
        [DataMember(Name="adjustPoints", EmitDefaultValue=false)]
        public int AdjustPoints { get; set; }

        /// <summary>
        /// Gets or Sets FoulPoints
        /// </summary>
        [DataMember(Name="foulPoints", EmitDefaultValue=false)]
        public int FoulPoints { get; set; }

        /// <summary>
        /// Gets or Sets Rp
        /// </summary>
        [DataMember(Name="rp", EmitDefaultValue=false)]
        public int Rp { get; set; }

        /// <summary>
        /// Gets or Sets TotalPoints
        /// </summary>
        [DataMember(Name="totalPoints", EmitDefaultValue=false)]
        public int TotalPoints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MatchScoreBreakdown2020Alliance {\n");
            sb.Append("  InitLineRobot1: ").Append(InitLineRobot1).Append("\n");
            sb.Append("  EndgameRobot1: ").Append(EndgameRobot1).Append("\n");
            sb.Append("  InitLineRobot2: ").Append(InitLineRobot2).Append("\n");
            sb.Append("  EndgameRobot2: ").Append(EndgameRobot2).Append("\n");
            sb.Append("  InitLineRobot3: ").Append(InitLineRobot3).Append("\n");
            sb.Append("  EndgameRobot3: ").Append(EndgameRobot3).Append("\n");
            sb.Append("  AutoCellsBottom: ").Append(AutoCellsBottom).Append("\n");
            sb.Append("  AutoCellsOuter: ").Append(AutoCellsOuter).Append("\n");
            sb.Append("  AutoCellsInner: ").Append(AutoCellsInner).Append("\n");
            sb.Append("  TeleopCellsBottom: ").Append(TeleopCellsBottom).Append("\n");
            sb.Append("  TeleopCellsOuter: ").Append(TeleopCellsOuter).Append("\n");
            sb.Append("  TeleopCellsInner: ").Append(TeleopCellsInner).Append("\n");
            sb.Append("  Stage1Activated: ").Append(Stage1Activated).Append("\n");
            sb.Append("  Stage2Activated: ").Append(Stage2Activated).Append("\n");
            sb.Append("  Stage3Activated: ").Append(Stage3Activated).Append("\n");
            sb.Append("  Stage3TargetColor: ").Append(Stage3TargetColor).Append("\n");
            sb.Append("  EndgameRungIsLevel: ").Append(EndgameRungIsLevel).Append("\n");
            sb.Append("  AutoInitLinePoints: ").Append(AutoInitLinePoints).Append("\n");
            sb.Append("  AutoCellPoints: ").Append(AutoCellPoints).Append("\n");
            sb.Append("  AutoPoints: ").Append(AutoPoints).Append("\n");
            sb.Append("  TeleopCellPoints: ").Append(TeleopCellPoints).Append("\n");
            sb.Append("  ControlPanelPoints: ").Append(ControlPanelPoints).Append("\n");
            sb.Append("  EndgamePoints: ").Append(EndgamePoints).Append("\n");
            sb.Append("  TeleopPoints: ").Append(TeleopPoints).Append("\n");
            sb.Append("  ShieldOperationalRankingPoint: ").Append(ShieldOperationalRankingPoint).Append("\n");
            sb.Append("  ShieldEnergizedRankingPoint: ").Append(ShieldEnergizedRankingPoint).Append("\n");
            sb.Append("  TbaShieldEnergizedRankingPointFromFoul: ").Append(TbaShieldEnergizedRankingPointFromFoul).Append("\n");
            sb.Append("  TbaNumRobotsHanging: ").Append(TbaNumRobotsHanging).Append("\n");
            sb.Append("  FoulCount: ").Append(FoulCount).Append("\n");
            sb.Append("  TechFoulCount: ").Append(TechFoulCount).Append("\n");
            sb.Append("  AdjustPoints: ").Append(AdjustPoints).Append("\n");
            sb.Append("  FoulPoints: ").Append(FoulPoints).Append("\n");
            sb.Append("  Rp: ").Append(Rp).Append("\n");
            sb.Append("  TotalPoints: ").Append(TotalPoints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MatchScoreBreakdown2020Alliance);
        }

        /// <summary>
        /// Returns true if MatchScoreBreakdown2020Alliance instances are equal
        /// </summary>
        /// <param name="input">Instance of MatchScoreBreakdown2020Alliance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MatchScoreBreakdown2020Alliance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InitLineRobot1 == input.InitLineRobot1 ||
                    (this.InitLineRobot1 != null &&
                    this.InitLineRobot1.Equals(input.InitLineRobot1))
                ) && 
                (
                    this.EndgameRobot1 == input.EndgameRobot1 ||
                    (this.EndgameRobot1 != null &&
                    this.EndgameRobot1.Equals(input.EndgameRobot1))
                ) && 
                (
                    this.InitLineRobot2 == input.InitLineRobot2 ||
                    (this.InitLineRobot2 != null &&
                    this.InitLineRobot2.Equals(input.InitLineRobot2))
                ) && 
                (
                    this.EndgameRobot2 == input.EndgameRobot2 ||
                    (this.EndgameRobot2 != null &&
                    this.EndgameRobot2.Equals(input.EndgameRobot2))
                ) && 
                (
                    this.InitLineRobot3 == input.InitLineRobot3 ||
                    (this.InitLineRobot3 != null &&
                    this.InitLineRobot3.Equals(input.InitLineRobot3))
                ) && 
                (
                    this.EndgameRobot3 == input.EndgameRobot3 ||
                    (this.EndgameRobot3 != null &&
                    this.EndgameRobot3.Equals(input.EndgameRobot3))
                ) && 
                (
                    this.AutoCellsBottom == input.AutoCellsBottom ||
                    this.AutoCellsBottom.Equals(input.AutoCellsBottom)
                ) && 
                (
                    this.AutoCellsOuter == input.AutoCellsOuter ||
                    this.AutoCellsOuter.Equals(input.AutoCellsOuter)
                ) && 
                (
                    this.AutoCellsInner == input.AutoCellsInner ||
                    this.AutoCellsInner.Equals(input.AutoCellsInner)
                ) && 
                (
                    this.TeleopCellsBottom == input.TeleopCellsBottom ||
                    this.TeleopCellsBottom.Equals(input.TeleopCellsBottom)
                ) && 
                (
                    this.TeleopCellsOuter == input.TeleopCellsOuter ||
                    this.TeleopCellsOuter.Equals(input.TeleopCellsOuter)
                ) && 
                (
                    this.TeleopCellsInner == input.TeleopCellsInner ||
                    this.TeleopCellsInner.Equals(input.TeleopCellsInner)
                ) && 
                (
                    this.Stage1Activated == input.Stage1Activated ||
                    this.Stage1Activated.Equals(input.Stage1Activated)
                ) && 
                (
                    this.Stage2Activated == input.Stage2Activated ||
                    this.Stage2Activated.Equals(input.Stage2Activated)
                ) && 
                (
                    this.Stage3Activated == input.Stage3Activated ||
                    this.Stage3Activated.Equals(input.Stage3Activated)
                ) && 
                (
                    this.Stage3TargetColor == input.Stage3TargetColor ||
                    (this.Stage3TargetColor != null &&
                    this.Stage3TargetColor.Equals(input.Stage3TargetColor))
                ) && 
                (
                    this.EndgameRungIsLevel == input.EndgameRungIsLevel ||
                    (this.EndgameRungIsLevel != null &&
                    this.EndgameRungIsLevel.Equals(input.EndgameRungIsLevel))
                ) && 
                (
                    this.AutoInitLinePoints == input.AutoInitLinePoints ||
                    this.AutoInitLinePoints.Equals(input.AutoInitLinePoints)
                ) && 
                (
                    this.AutoCellPoints == input.AutoCellPoints ||
                    this.AutoCellPoints.Equals(input.AutoCellPoints)
                ) && 
                (
                    this.AutoPoints == input.AutoPoints ||
                    this.AutoPoints.Equals(input.AutoPoints)
                ) && 
                (
                    this.TeleopCellPoints == input.TeleopCellPoints ||
                    this.TeleopCellPoints.Equals(input.TeleopCellPoints)
                ) && 
                (
                    this.ControlPanelPoints == input.ControlPanelPoints ||
                    this.ControlPanelPoints.Equals(input.ControlPanelPoints)
                ) && 
                (
                    this.EndgamePoints == input.EndgamePoints ||
                    this.EndgamePoints.Equals(input.EndgamePoints)
                ) && 
                (
                    this.TeleopPoints == input.TeleopPoints ||
                    this.TeleopPoints.Equals(input.TeleopPoints)
                ) && 
                (
                    this.ShieldOperationalRankingPoint == input.ShieldOperationalRankingPoint ||
                    this.ShieldOperationalRankingPoint.Equals(input.ShieldOperationalRankingPoint)
                ) && 
                (
                    this.ShieldEnergizedRankingPoint == input.ShieldEnergizedRankingPoint ||
                    this.ShieldEnergizedRankingPoint.Equals(input.ShieldEnergizedRankingPoint)
                ) && 
                (
                    this.TbaShieldEnergizedRankingPointFromFoul == input.TbaShieldEnergizedRankingPointFromFoul ||
                    this.TbaShieldEnergizedRankingPointFromFoul.Equals(input.TbaShieldEnergizedRankingPointFromFoul)
                ) && 
                (
                    this.TbaNumRobotsHanging == input.TbaNumRobotsHanging ||
                    this.TbaNumRobotsHanging.Equals(input.TbaNumRobotsHanging)
                ) && 
                (
                    this.FoulCount == input.FoulCount ||
                    this.FoulCount.Equals(input.FoulCount)
                ) && 
                (
                    this.TechFoulCount == input.TechFoulCount ||
                    this.TechFoulCount.Equals(input.TechFoulCount)
                ) && 
                (
                    this.AdjustPoints == input.AdjustPoints ||
                    this.AdjustPoints.Equals(input.AdjustPoints)
                ) && 
                (
                    this.FoulPoints == input.FoulPoints ||
                    this.FoulPoints.Equals(input.FoulPoints)
                ) && 
                (
                    this.Rp == input.Rp ||
                    this.Rp.Equals(input.Rp)
                ) && 
                (
                    this.TotalPoints == input.TotalPoints ||
                    this.TotalPoints.Equals(input.TotalPoints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InitLineRobot1 != null)
                    hashCode = hashCode * 59 + this.InitLineRobot1.GetHashCode();
                if (this.EndgameRobot1 != null)
                    hashCode = hashCode * 59 + this.EndgameRobot1.GetHashCode();
                if (this.InitLineRobot2 != null)
                    hashCode = hashCode * 59 + this.InitLineRobot2.GetHashCode();
                if (this.EndgameRobot2 != null)
                    hashCode = hashCode * 59 + this.EndgameRobot2.GetHashCode();
                if (this.InitLineRobot3 != null)
                    hashCode = hashCode * 59 + this.InitLineRobot3.GetHashCode();
                if (this.EndgameRobot3 != null)
                    hashCode = hashCode * 59 + this.EndgameRobot3.GetHashCode();
                hashCode = hashCode * 59 + this.AutoCellsBottom.GetHashCode();
                hashCode = hashCode * 59 + this.AutoCellsOuter.GetHashCode();
                hashCode = hashCode * 59 + this.AutoCellsInner.GetHashCode();
                hashCode = hashCode * 59 + this.TeleopCellsBottom.GetHashCode();
                hashCode = hashCode * 59 + this.TeleopCellsOuter.GetHashCode();
                hashCode = hashCode * 59 + this.TeleopCellsInner.GetHashCode();
                hashCode = hashCode * 59 + this.Stage1Activated.GetHashCode();
                hashCode = hashCode * 59 + this.Stage2Activated.GetHashCode();
                hashCode = hashCode * 59 + this.Stage3Activated.GetHashCode();
                if (this.Stage3TargetColor != null)
                    hashCode = hashCode * 59 + this.Stage3TargetColor.GetHashCode();
                if (this.EndgameRungIsLevel != null)
                    hashCode = hashCode * 59 + this.EndgameRungIsLevel.GetHashCode();
                hashCode = hashCode * 59 + this.AutoInitLinePoints.GetHashCode();
                hashCode = hashCode * 59 + this.AutoCellPoints.GetHashCode();
                hashCode = hashCode * 59 + this.AutoPoints.GetHashCode();
                hashCode = hashCode * 59 + this.TeleopCellPoints.GetHashCode();
                hashCode = hashCode * 59 + this.ControlPanelPoints.GetHashCode();
                hashCode = hashCode * 59 + this.EndgamePoints.GetHashCode();
                hashCode = hashCode * 59 + this.TeleopPoints.GetHashCode();
                hashCode = hashCode * 59 + this.ShieldOperationalRankingPoint.GetHashCode();
                hashCode = hashCode * 59 + this.ShieldEnergizedRankingPoint.GetHashCode();
                hashCode = hashCode * 59 + this.TbaShieldEnergizedRankingPointFromFoul.GetHashCode();
                hashCode = hashCode * 59 + this.TbaNumRobotsHanging.GetHashCode();
                hashCode = hashCode * 59 + this.FoulCount.GetHashCode();
                hashCode = hashCode * 59 + this.TechFoulCount.GetHashCode();
                hashCode = hashCode * 59 + this.AdjustPoints.GetHashCode();
                hashCode = hashCode * 59 + this.FoulPoints.GetHashCode();
                hashCode = hashCode * 59 + this.Rp.GetHashCode();
                hashCode = hashCode * 59 + this.TotalPoints.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
