/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TBAAPI.V3Client.Client.OpenAPIDateConverter;

namespace TBAAPI.V3Client.Model
{
    /// <summary>
    /// Insights for FIRST STEAMWORKS qualification and elimination matches.
    /// </summary>
    [DataContract]
    public partial class EventInsights2017 :  IEquatable<EventInsights2017>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventInsights2017" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EventInsights2017() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventInsights2017" /> class.
        /// </summary>
        /// <param name="averageFoulScore">Average foul score. (required).</param>
        /// <param name="averageFuelPoints">Average fuel points scored. (required).</param>
        /// <param name="averageFuelPointsAuto">Average fuel points scored during auto. (required).</param>
        /// <param name="averageFuelPointsTeleop">Average fuel points scored during teleop. (required).</param>
        /// <param name="averageHighGoals">Average points scored in the high goal. (required).</param>
        /// <param name="averageHighGoalsAuto">Average points scored in the high goal during auto. (required).</param>
        /// <param name="averageHighGoalsTeleop">Average points scored in the high goal during teleop. (required).</param>
        /// <param name="averageLowGoals">Average points scored in the low goal. (required).</param>
        /// <param name="averageLowGoalsAuto">Average points scored in the low goal during auto. (required).</param>
        /// <param name="averageLowGoalsTeleop">Average points scored in the low goal during teleop. (required).</param>
        /// <param name="averageMobilityPointsAuto">Average mobility points scored during auto. (required).</param>
        /// <param name="averagePointsAuto">Average points scored during auto. (required).</param>
        /// <param name="averagePointsTeleop">Average points scored during teleop. (required).</param>
        /// <param name="averageRotorPoints">Average rotor points scored. (required).</param>
        /// <param name="averageRotorPointsAuto">Average rotor points scored during auto. (required).</param>
        /// <param name="averageRotorPointsTeleop">Average rotor points scored during teleop. (required).</param>
        /// <param name="averageScore">Average score. (required).</param>
        /// <param name="averageTakeoffPointsTeleop">Average takeoff points scored during teleop. (required).</param>
        /// <param name="averageWinMargin">Average margin of victory. (required).</param>
        /// <param name="averageWinScore">Average winning score. (required).</param>
        /// <param name="highKpa">An array with three values, kPa scored, match key from the match with the high kPa, and the name of the match (required).</param>
        /// <param name="highScore">An array with three values, high score, match key from the match with the high score, and the name of the match (required).</param>
        /// <param name="kpaAchieved">An array with three values, number of times kPa bonus achieved, number of opportunities to bonus, and percentage. (required).</param>
        /// <param name="mobilityCounts">An array with three values, number of times mobility bonus achieved, number of opportunities to bonus, and percentage. (required).</param>
        /// <param name="rotor1Engaged">An array with three values, number of times rotor 1 engaged, number of opportunities to engage, and percentage. (required).</param>
        /// <param name="rotor1EngagedAuto">An array with three values, number of times rotor 1 engaged in auto, number of opportunities to engage in auto, and percentage. (required).</param>
        /// <param name="rotor2Engaged">An array with three values, number of times rotor 2 engaged, number of opportunities to engage, and percentage. (required).</param>
        /// <param name="rotor2EngagedAuto">An array with three values, number of times rotor 2 engaged in auto, number of opportunities to engage in auto, and percentage. (required).</param>
        /// <param name="rotor3Engaged">An array with three values, number of times rotor 3 engaged, number of opportunities to engage, and percentage. (required).</param>
        /// <param name="rotor4Engaged">An array with three values, number of times rotor 4 engaged, number of opportunities to engage, and percentage. (required).</param>
        /// <param name="takeoffCounts">An array with three values, number of times takeoff was counted, number of opportunities to takeoff, and percentage. (required).</param>
        /// <param name="unicornMatches">An array with three values, number of times a unicorn match (Win + kPa &amp; Rotor Bonuses) occured, number of opportunities to have a unicorn match, and percentage. (required).</param>
        public EventInsights2017(float averageFoulScore = default(float), float averageFuelPoints = default(float), float averageFuelPointsAuto = default(float), float averageFuelPointsTeleop = default(float), float averageHighGoals = default(float), float averageHighGoalsAuto = default(float), float averageHighGoalsTeleop = default(float), float averageLowGoals = default(float), float averageLowGoalsAuto = default(float), float averageLowGoalsTeleop = default(float), float averageMobilityPointsAuto = default(float), float averagePointsAuto = default(float), float averagePointsTeleop = default(float), float averageRotorPoints = default(float), float averageRotorPointsAuto = default(float), float averageRotorPointsTeleop = default(float), float averageScore = default(float), float averageTakeoffPointsTeleop = default(float), float averageWinMargin = default(float), float averageWinScore = default(float), List<string> highKpa = default(List<string>), List<string> highScore = default(List<string>), List<float> kpaAchieved = default(List<float>), List<float> mobilityCounts = default(List<float>), List<float> rotor1Engaged = default(List<float>), List<float> rotor1EngagedAuto = default(List<float>), List<float> rotor2Engaged = default(List<float>), List<float> rotor2EngagedAuto = default(List<float>), List<float> rotor3Engaged = default(List<float>), List<float> rotor4Engaged = default(List<float>), List<float> takeoffCounts = default(List<float>), List<float> unicornMatches = default(List<float>))
        {
            this.AverageFoulScore = averageFoulScore;
            this.AverageFuelPoints = averageFuelPoints;
            this.AverageFuelPointsAuto = averageFuelPointsAuto;
            this.AverageFuelPointsTeleop = averageFuelPointsTeleop;
            this.AverageHighGoals = averageHighGoals;
            this.AverageHighGoalsAuto = averageHighGoalsAuto;
            this.AverageHighGoalsTeleop = averageHighGoalsTeleop;
            this.AverageLowGoals = averageLowGoals;
            this.AverageLowGoalsAuto = averageLowGoalsAuto;
            this.AverageLowGoalsTeleop = averageLowGoalsTeleop;
            this.AverageMobilityPointsAuto = averageMobilityPointsAuto;
            this.AveragePointsAuto = averagePointsAuto;
            this.AveragePointsTeleop = averagePointsTeleop;
            this.AverageRotorPoints = averageRotorPoints;
            this.AverageRotorPointsAuto = averageRotorPointsAuto;
            this.AverageRotorPointsTeleop = averageRotorPointsTeleop;
            this.AverageScore = averageScore;
            this.AverageTakeoffPointsTeleop = averageTakeoffPointsTeleop;
            this.AverageWinMargin = averageWinMargin;
            this.AverageWinScore = averageWinScore;
            // to ensure "highKpa" is required (not null)
            this.HighKpa = highKpa ?? throw new ArgumentNullException("highKpa is a required property for EventInsights2017 and cannot be null");
            // to ensure "highScore" is required (not null)
            this.HighScore = highScore ?? throw new ArgumentNullException("highScore is a required property for EventInsights2017 and cannot be null");
            // to ensure "kpaAchieved" is required (not null)
            this.KpaAchieved = kpaAchieved ?? throw new ArgumentNullException("kpaAchieved is a required property for EventInsights2017 and cannot be null");
            // to ensure "mobilityCounts" is required (not null)
            this.MobilityCounts = mobilityCounts ?? throw new ArgumentNullException("mobilityCounts is a required property for EventInsights2017 and cannot be null");
            // to ensure "rotor1Engaged" is required (not null)
            this.Rotor1Engaged = rotor1Engaged ?? throw new ArgumentNullException("rotor1Engaged is a required property for EventInsights2017 and cannot be null");
            // to ensure "rotor1EngagedAuto" is required (not null)
            this.Rotor1EngagedAuto = rotor1EngagedAuto ?? throw new ArgumentNullException("rotor1EngagedAuto is a required property for EventInsights2017 and cannot be null");
            // to ensure "rotor2Engaged" is required (not null)
            this.Rotor2Engaged = rotor2Engaged ?? throw new ArgumentNullException("rotor2Engaged is a required property for EventInsights2017 and cannot be null");
            // to ensure "rotor2EngagedAuto" is required (not null)
            this.Rotor2EngagedAuto = rotor2EngagedAuto ?? throw new ArgumentNullException("rotor2EngagedAuto is a required property for EventInsights2017 and cannot be null");
            // to ensure "rotor3Engaged" is required (not null)
            this.Rotor3Engaged = rotor3Engaged ?? throw new ArgumentNullException("rotor3Engaged is a required property for EventInsights2017 and cannot be null");
            // to ensure "rotor4Engaged" is required (not null)
            this.Rotor4Engaged = rotor4Engaged ?? throw new ArgumentNullException("rotor4Engaged is a required property for EventInsights2017 and cannot be null");
            // to ensure "takeoffCounts" is required (not null)
            this.TakeoffCounts = takeoffCounts ?? throw new ArgumentNullException("takeoffCounts is a required property for EventInsights2017 and cannot be null");
            // to ensure "unicornMatches" is required (not null)
            this.UnicornMatches = unicornMatches ?? throw new ArgumentNullException("unicornMatches is a required property for EventInsights2017 and cannot be null");
        }
        
        /// <summary>
        /// Average foul score.
        /// </summary>
        /// <value>Average foul score.</value>
        [DataMember(Name="average_foul_score", EmitDefaultValue=false)]
        public float AverageFoulScore { get; set; }

        /// <summary>
        /// Average fuel points scored.
        /// </summary>
        /// <value>Average fuel points scored.</value>
        [DataMember(Name="average_fuel_points", EmitDefaultValue=false)]
        public float AverageFuelPoints { get; set; }

        /// <summary>
        /// Average fuel points scored during auto.
        /// </summary>
        /// <value>Average fuel points scored during auto.</value>
        [DataMember(Name="average_fuel_points_auto", EmitDefaultValue=false)]
        public float AverageFuelPointsAuto { get; set; }

        /// <summary>
        /// Average fuel points scored during teleop.
        /// </summary>
        /// <value>Average fuel points scored during teleop.</value>
        [DataMember(Name="average_fuel_points_teleop", EmitDefaultValue=false)]
        public float AverageFuelPointsTeleop { get; set; }

        /// <summary>
        /// Average points scored in the high goal.
        /// </summary>
        /// <value>Average points scored in the high goal.</value>
        [DataMember(Name="average_high_goals", EmitDefaultValue=false)]
        public float AverageHighGoals { get; set; }

        /// <summary>
        /// Average points scored in the high goal during auto.
        /// </summary>
        /// <value>Average points scored in the high goal during auto.</value>
        [DataMember(Name="average_high_goals_auto", EmitDefaultValue=false)]
        public float AverageHighGoalsAuto { get; set; }

        /// <summary>
        /// Average points scored in the high goal during teleop.
        /// </summary>
        /// <value>Average points scored in the high goal during teleop.</value>
        [DataMember(Name="average_high_goals_teleop", EmitDefaultValue=false)]
        public float AverageHighGoalsTeleop { get; set; }

        /// <summary>
        /// Average points scored in the low goal.
        /// </summary>
        /// <value>Average points scored in the low goal.</value>
        [DataMember(Name="average_low_goals", EmitDefaultValue=false)]
        public float AverageLowGoals { get; set; }

        /// <summary>
        /// Average points scored in the low goal during auto.
        /// </summary>
        /// <value>Average points scored in the low goal during auto.</value>
        [DataMember(Name="average_low_goals_auto", EmitDefaultValue=false)]
        public float AverageLowGoalsAuto { get; set; }

        /// <summary>
        /// Average points scored in the low goal during teleop.
        /// </summary>
        /// <value>Average points scored in the low goal during teleop.</value>
        [DataMember(Name="average_low_goals_teleop", EmitDefaultValue=false)]
        public float AverageLowGoalsTeleop { get; set; }

        /// <summary>
        /// Average mobility points scored during auto.
        /// </summary>
        /// <value>Average mobility points scored during auto.</value>
        [DataMember(Name="average_mobility_points_auto", EmitDefaultValue=false)]
        public float AverageMobilityPointsAuto { get; set; }

        /// <summary>
        /// Average points scored during auto.
        /// </summary>
        /// <value>Average points scored during auto.</value>
        [DataMember(Name="average_points_auto", EmitDefaultValue=false)]
        public float AveragePointsAuto { get; set; }

        /// <summary>
        /// Average points scored during teleop.
        /// </summary>
        /// <value>Average points scored during teleop.</value>
        [DataMember(Name="average_points_teleop", EmitDefaultValue=false)]
        public float AveragePointsTeleop { get; set; }

        /// <summary>
        /// Average rotor points scored.
        /// </summary>
        /// <value>Average rotor points scored.</value>
        [DataMember(Name="average_rotor_points", EmitDefaultValue=false)]
        public float AverageRotorPoints { get; set; }

        /// <summary>
        /// Average rotor points scored during auto.
        /// </summary>
        /// <value>Average rotor points scored during auto.</value>
        [DataMember(Name="average_rotor_points_auto", EmitDefaultValue=false)]
        public float AverageRotorPointsAuto { get; set; }

        /// <summary>
        /// Average rotor points scored during teleop.
        /// </summary>
        /// <value>Average rotor points scored during teleop.</value>
        [DataMember(Name="average_rotor_points_teleop", EmitDefaultValue=false)]
        public float AverageRotorPointsTeleop { get; set; }

        /// <summary>
        /// Average score.
        /// </summary>
        /// <value>Average score.</value>
        [DataMember(Name="average_score", EmitDefaultValue=false)]
        public float AverageScore { get; set; }

        /// <summary>
        /// Average takeoff points scored during teleop.
        /// </summary>
        /// <value>Average takeoff points scored during teleop.</value>
        [DataMember(Name="average_takeoff_points_teleop", EmitDefaultValue=false)]
        public float AverageTakeoffPointsTeleop { get; set; }

        /// <summary>
        /// Average margin of victory.
        /// </summary>
        /// <value>Average margin of victory.</value>
        [DataMember(Name="average_win_margin", EmitDefaultValue=false)]
        public float AverageWinMargin { get; set; }

        /// <summary>
        /// Average winning score.
        /// </summary>
        /// <value>Average winning score.</value>
        [DataMember(Name="average_win_score", EmitDefaultValue=false)]
        public float AverageWinScore { get; set; }

        /// <summary>
        /// An array with three values, kPa scored, match key from the match with the high kPa, and the name of the match
        /// </summary>
        /// <value>An array with three values, kPa scored, match key from the match with the high kPa, and the name of the match</value>
        [DataMember(Name="high_kpa", EmitDefaultValue=false)]
        public List<string> HighKpa { get; set; }

        /// <summary>
        /// An array with three values, high score, match key from the match with the high score, and the name of the match
        /// </summary>
        /// <value>An array with three values, high score, match key from the match with the high score, and the name of the match</value>
        [DataMember(Name="high_score", EmitDefaultValue=false)]
        public List<string> HighScore { get; set; }

        /// <summary>
        /// An array with three values, number of times kPa bonus achieved, number of opportunities to bonus, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times kPa bonus achieved, number of opportunities to bonus, and percentage.</value>
        [DataMember(Name="kpa_achieved", EmitDefaultValue=false)]
        public List<float> KpaAchieved { get; set; }

        /// <summary>
        /// An array with three values, number of times mobility bonus achieved, number of opportunities to bonus, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times mobility bonus achieved, number of opportunities to bonus, and percentage.</value>
        [DataMember(Name="mobility_counts", EmitDefaultValue=false)]
        public List<float> MobilityCounts { get; set; }

        /// <summary>
        /// An array with three values, number of times rotor 1 engaged, number of opportunities to engage, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times rotor 1 engaged, number of opportunities to engage, and percentage.</value>
        [DataMember(Name="rotor_1_engaged", EmitDefaultValue=false)]
        public List<float> Rotor1Engaged { get; set; }

        /// <summary>
        /// An array with three values, number of times rotor 1 engaged in auto, number of opportunities to engage in auto, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times rotor 1 engaged in auto, number of opportunities to engage in auto, and percentage.</value>
        [DataMember(Name="rotor_1_engaged_auto", EmitDefaultValue=false)]
        public List<float> Rotor1EngagedAuto { get; set; }

        /// <summary>
        /// An array with three values, number of times rotor 2 engaged, number of opportunities to engage, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times rotor 2 engaged, number of opportunities to engage, and percentage.</value>
        [DataMember(Name="rotor_2_engaged", EmitDefaultValue=false)]
        public List<float> Rotor2Engaged { get; set; }

        /// <summary>
        /// An array with three values, number of times rotor 2 engaged in auto, number of opportunities to engage in auto, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times rotor 2 engaged in auto, number of opportunities to engage in auto, and percentage.</value>
        [DataMember(Name="rotor_2_engaged_auto", EmitDefaultValue=false)]
        public List<float> Rotor2EngagedAuto { get; set; }

        /// <summary>
        /// An array with three values, number of times rotor 3 engaged, number of opportunities to engage, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times rotor 3 engaged, number of opportunities to engage, and percentage.</value>
        [DataMember(Name="rotor_3_engaged", EmitDefaultValue=false)]
        public List<float> Rotor3Engaged { get; set; }

        /// <summary>
        /// An array with three values, number of times rotor 4 engaged, number of opportunities to engage, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times rotor 4 engaged, number of opportunities to engage, and percentage.</value>
        [DataMember(Name="rotor_4_engaged", EmitDefaultValue=false)]
        public List<float> Rotor4Engaged { get; set; }

        /// <summary>
        /// An array with three values, number of times takeoff was counted, number of opportunities to takeoff, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times takeoff was counted, number of opportunities to takeoff, and percentage.</value>
        [DataMember(Name="takeoff_counts", EmitDefaultValue=false)]
        public List<float> TakeoffCounts { get; set; }

        /// <summary>
        /// An array with three values, number of times a unicorn match (Win + kPa &amp; Rotor Bonuses) occured, number of opportunities to have a unicorn match, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times a unicorn match (Win + kPa &amp; Rotor Bonuses) occured, number of opportunities to have a unicorn match, and percentage.</value>
        [DataMember(Name="unicorn_matches", EmitDefaultValue=false)]
        public List<float> UnicornMatches { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventInsights2017 {\n");
            sb.Append("  AverageFoulScore: ").Append(AverageFoulScore).Append("\n");
            sb.Append("  AverageFuelPoints: ").Append(AverageFuelPoints).Append("\n");
            sb.Append("  AverageFuelPointsAuto: ").Append(AverageFuelPointsAuto).Append("\n");
            sb.Append("  AverageFuelPointsTeleop: ").Append(AverageFuelPointsTeleop).Append("\n");
            sb.Append("  AverageHighGoals: ").Append(AverageHighGoals).Append("\n");
            sb.Append("  AverageHighGoalsAuto: ").Append(AverageHighGoalsAuto).Append("\n");
            sb.Append("  AverageHighGoalsTeleop: ").Append(AverageHighGoalsTeleop).Append("\n");
            sb.Append("  AverageLowGoals: ").Append(AverageLowGoals).Append("\n");
            sb.Append("  AverageLowGoalsAuto: ").Append(AverageLowGoalsAuto).Append("\n");
            sb.Append("  AverageLowGoalsTeleop: ").Append(AverageLowGoalsTeleop).Append("\n");
            sb.Append("  AverageMobilityPointsAuto: ").Append(AverageMobilityPointsAuto).Append("\n");
            sb.Append("  AveragePointsAuto: ").Append(AveragePointsAuto).Append("\n");
            sb.Append("  AveragePointsTeleop: ").Append(AveragePointsTeleop).Append("\n");
            sb.Append("  AverageRotorPoints: ").Append(AverageRotorPoints).Append("\n");
            sb.Append("  AverageRotorPointsAuto: ").Append(AverageRotorPointsAuto).Append("\n");
            sb.Append("  AverageRotorPointsTeleop: ").Append(AverageRotorPointsTeleop).Append("\n");
            sb.Append("  AverageScore: ").Append(AverageScore).Append("\n");
            sb.Append("  AverageTakeoffPointsTeleop: ").Append(AverageTakeoffPointsTeleop).Append("\n");
            sb.Append("  AverageWinMargin: ").Append(AverageWinMargin).Append("\n");
            sb.Append("  AverageWinScore: ").Append(AverageWinScore).Append("\n");
            sb.Append("  HighKpa: ").Append(HighKpa).Append("\n");
            sb.Append("  HighScore: ").Append(HighScore).Append("\n");
            sb.Append("  KpaAchieved: ").Append(KpaAchieved).Append("\n");
            sb.Append("  MobilityCounts: ").Append(MobilityCounts).Append("\n");
            sb.Append("  Rotor1Engaged: ").Append(Rotor1Engaged).Append("\n");
            sb.Append("  Rotor1EngagedAuto: ").Append(Rotor1EngagedAuto).Append("\n");
            sb.Append("  Rotor2Engaged: ").Append(Rotor2Engaged).Append("\n");
            sb.Append("  Rotor2EngagedAuto: ").Append(Rotor2EngagedAuto).Append("\n");
            sb.Append("  Rotor3Engaged: ").Append(Rotor3Engaged).Append("\n");
            sb.Append("  Rotor4Engaged: ").Append(Rotor4Engaged).Append("\n");
            sb.Append("  TakeoffCounts: ").Append(TakeoffCounts).Append("\n");
            sb.Append("  UnicornMatches: ").Append(UnicornMatches).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventInsights2017);
        }

        /// <summary>
        /// Returns true if EventInsights2017 instances are equal
        /// </summary>
        /// <param name="input">Instance of EventInsights2017 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventInsights2017 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AverageFoulScore == input.AverageFoulScore ||
                    this.AverageFoulScore.Equals(input.AverageFoulScore)
                ) && 
                (
                    this.AverageFuelPoints == input.AverageFuelPoints ||
                    this.AverageFuelPoints.Equals(input.AverageFuelPoints)
                ) && 
                (
                    this.AverageFuelPointsAuto == input.AverageFuelPointsAuto ||
                    this.AverageFuelPointsAuto.Equals(input.AverageFuelPointsAuto)
                ) && 
                (
                    this.AverageFuelPointsTeleop == input.AverageFuelPointsTeleop ||
                    this.AverageFuelPointsTeleop.Equals(input.AverageFuelPointsTeleop)
                ) && 
                (
                    this.AverageHighGoals == input.AverageHighGoals ||
                    this.AverageHighGoals.Equals(input.AverageHighGoals)
                ) && 
                (
                    this.AverageHighGoalsAuto == input.AverageHighGoalsAuto ||
                    this.AverageHighGoalsAuto.Equals(input.AverageHighGoalsAuto)
                ) && 
                (
                    this.AverageHighGoalsTeleop == input.AverageHighGoalsTeleop ||
                    this.AverageHighGoalsTeleop.Equals(input.AverageHighGoalsTeleop)
                ) && 
                (
                    this.AverageLowGoals == input.AverageLowGoals ||
                    this.AverageLowGoals.Equals(input.AverageLowGoals)
                ) && 
                (
                    this.AverageLowGoalsAuto == input.AverageLowGoalsAuto ||
                    this.AverageLowGoalsAuto.Equals(input.AverageLowGoalsAuto)
                ) && 
                (
                    this.AverageLowGoalsTeleop == input.AverageLowGoalsTeleop ||
                    this.AverageLowGoalsTeleop.Equals(input.AverageLowGoalsTeleop)
                ) && 
                (
                    this.AverageMobilityPointsAuto == input.AverageMobilityPointsAuto ||
                    this.AverageMobilityPointsAuto.Equals(input.AverageMobilityPointsAuto)
                ) && 
                (
                    this.AveragePointsAuto == input.AveragePointsAuto ||
                    this.AveragePointsAuto.Equals(input.AveragePointsAuto)
                ) && 
                (
                    this.AveragePointsTeleop == input.AveragePointsTeleop ||
                    this.AveragePointsTeleop.Equals(input.AveragePointsTeleop)
                ) && 
                (
                    this.AverageRotorPoints == input.AverageRotorPoints ||
                    this.AverageRotorPoints.Equals(input.AverageRotorPoints)
                ) && 
                (
                    this.AverageRotorPointsAuto == input.AverageRotorPointsAuto ||
                    this.AverageRotorPointsAuto.Equals(input.AverageRotorPointsAuto)
                ) && 
                (
                    this.AverageRotorPointsTeleop == input.AverageRotorPointsTeleop ||
                    this.AverageRotorPointsTeleop.Equals(input.AverageRotorPointsTeleop)
                ) && 
                (
                    this.AverageScore == input.AverageScore ||
                    this.AverageScore.Equals(input.AverageScore)
                ) && 
                (
                    this.AverageTakeoffPointsTeleop == input.AverageTakeoffPointsTeleop ||
                    this.AverageTakeoffPointsTeleop.Equals(input.AverageTakeoffPointsTeleop)
                ) && 
                (
                    this.AverageWinMargin == input.AverageWinMargin ||
                    this.AverageWinMargin.Equals(input.AverageWinMargin)
                ) && 
                (
                    this.AverageWinScore == input.AverageWinScore ||
                    this.AverageWinScore.Equals(input.AverageWinScore)
                ) && 
                (
                    this.HighKpa == input.HighKpa ||
                    this.HighKpa != null &&
                    input.HighKpa != null &&
                    this.HighKpa.SequenceEqual(input.HighKpa)
                ) && 
                (
                    this.HighScore == input.HighScore ||
                    this.HighScore != null &&
                    input.HighScore != null &&
                    this.HighScore.SequenceEqual(input.HighScore)
                ) && 
                (
                    this.KpaAchieved == input.KpaAchieved ||
                    this.KpaAchieved != null &&
                    input.KpaAchieved != null &&
                    this.KpaAchieved.SequenceEqual(input.KpaAchieved)
                ) && 
                (
                    this.MobilityCounts == input.MobilityCounts ||
                    this.MobilityCounts != null &&
                    input.MobilityCounts != null &&
                    this.MobilityCounts.SequenceEqual(input.MobilityCounts)
                ) && 
                (
                    this.Rotor1Engaged == input.Rotor1Engaged ||
                    this.Rotor1Engaged != null &&
                    input.Rotor1Engaged != null &&
                    this.Rotor1Engaged.SequenceEqual(input.Rotor1Engaged)
                ) && 
                (
                    this.Rotor1EngagedAuto == input.Rotor1EngagedAuto ||
                    this.Rotor1EngagedAuto != null &&
                    input.Rotor1EngagedAuto != null &&
                    this.Rotor1EngagedAuto.SequenceEqual(input.Rotor1EngagedAuto)
                ) && 
                (
                    this.Rotor2Engaged == input.Rotor2Engaged ||
                    this.Rotor2Engaged != null &&
                    input.Rotor2Engaged != null &&
                    this.Rotor2Engaged.SequenceEqual(input.Rotor2Engaged)
                ) && 
                (
                    this.Rotor2EngagedAuto == input.Rotor2EngagedAuto ||
                    this.Rotor2EngagedAuto != null &&
                    input.Rotor2EngagedAuto != null &&
                    this.Rotor2EngagedAuto.SequenceEqual(input.Rotor2EngagedAuto)
                ) && 
                (
                    this.Rotor3Engaged == input.Rotor3Engaged ||
                    this.Rotor3Engaged != null &&
                    input.Rotor3Engaged != null &&
                    this.Rotor3Engaged.SequenceEqual(input.Rotor3Engaged)
                ) && 
                (
                    this.Rotor4Engaged == input.Rotor4Engaged ||
                    this.Rotor4Engaged != null &&
                    input.Rotor4Engaged != null &&
                    this.Rotor4Engaged.SequenceEqual(input.Rotor4Engaged)
                ) && 
                (
                    this.TakeoffCounts == input.TakeoffCounts ||
                    this.TakeoffCounts != null &&
                    input.TakeoffCounts != null &&
                    this.TakeoffCounts.SequenceEqual(input.TakeoffCounts)
                ) && 
                (
                    this.UnicornMatches == input.UnicornMatches ||
                    this.UnicornMatches != null &&
                    input.UnicornMatches != null &&
                    this.UnicornMatches.SequenceEqual(input.UnicornMatches)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AverageFoulScore.GetHashCode();
                hashCode = hashCode * 59 + this.AverageFuelPoints.GetHashCode();
                hashCode = hashCode * 59 + this.AverageFuelPointsAuto.GetHashCode();
                hashCode = hashCode * 59 + this.AverageFuelPointsTeleop.GetHashCode();
                hashCode = hashCode * 59 + this.AverageHighGoals.GetHashCode();
                hashCode = hashCode * 59 + this.AverageHighGoalsAuto.GetHashCode();
                hashCode = hashCode * 59 + this.AverageHighGoalsTeleop.GetHashCode();
                hashCode = hashCode * 59 + this.AverageLowGoals.GetHashCode();
                hashCode = hashCode * 59 + this.AverageLowGoalsAuto.GetHashCode();
                hashCode = hashCode * 59 + this.AverageLowGoalsTeleop.GetHashCode();
                hashCode = hashCode * 59 + this.AverageMobilityPointsAuto.GetHashCode();
                hashCode = hashCode * 59 + this.AveragePointsAuto.GetHashCode();
                hashCode = hashCode * 59 + this.AveragePointsTeleop.GetHashCode();
                hashCode = hashCode * 59 + this.AverageRotorPoints.GetHashCode();
                hashCode = hashCode * 59 + this.AverageRotorPointsAuto.GetHashCode();
                hashCode = hashCode * 59 + this.AverageRotorPointsTeleop.GetHashCode();
                hashCode = hashCode * 59 + this.AverageScore.GetHashCode();
                hashCode = hashCode * 59 + this.AverageTakeoffPointsTeleop.GetHashCode();
                hashCode = hashCode * 59 + this.AverageWinMargin.GetHashCode();
                hashCode = hashCode * 59 + this.AverageWinScore.GetHashCode();
                if (this.HighKpa != null)
                    hashCode = hashCode * 59 + this.HighKpa.GetHashCode();
                if (this.HighScore != null)
                    hashCode = hashCode * 59 + this.HighScore.GetHashCode();
                if (this.KpaAchieved != null)
                    hashCode = hashCode * 59 + this.KpaAchieved.GetHashCode();
                if (this.MobilityCounts != null)
                    hashCode = hashCode * 59 + this.MobilityCounts.GetHashCode();
                if (this.Rotor1Engaged != null)
                    hashCode = hashCode * 59 + this.Rotor1Engaged.GetHashCode();
                if (this.Rotor1EngagedAuto != null)
                    hashCode = hashCode * 59 + this.Rotor1EngagedAuto.GetHashCode();
                if (this.Rotor2Engaged != null)
                    hashCode = hashCode * 59 + this.Rotor2Engaged.GetHashCode();
                if (this.Rotor2EngagedAuto != null)
                    hashCode = hashCode * 59 + this.Rotor2EngagedAuto.GetHashCode();
                if (this.Rotor3Engaged != null)
                    hashCode = hashCode * 59 + this.Rotor3Engaged.GetHashCode();
                if (this.Rotor4Engaged != null)
                    hashCode = hashCode * 59 + this.Rotor4Engaged.GetHashCode();
                if (this.TakeoffCounts != null)
                    hashCode = hashCode * 59 + this.TakeoffCounts.GetHashCode();
                if (this.UnicornMatches != null)
                    hashCode = hashCode * 59 + this.UnicornMatches.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
