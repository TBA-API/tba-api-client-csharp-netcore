/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TBAAPI.V3Client.Client.OpenAPIDateConverter;

namespace TBAAPI.V3Client.Model
{
    /// <summary>
    /// ZebraTeam
    /// </summary>
    [DataContract]
    public partial class ZebraTeam :  IEquatable<ZebraTeam>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ZebraTeam" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ZebraTeam() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ZebraTeam" /> class.
        /// </summary>
        /// <param name="teamKey">The TBA team key for the Zebra MotionWorks data. (required).</param>
        /// <param name="xs">A list containing doubles and nulls representing a teams X position in feet at the corresponding timestamp. A null value represents no tracking data for a given timestamp. (required).</param>
        /// <param name="ys">A list containing doubles and nulls representing a teams Y position in feet at the corresponding timestamp. A null value represents no tracking data for a given timestamp. (required).</param>
        public ZebraTeam(string teamKey = default(string), List<double> xs = default(List<double>), List<double> ys = default(List<double>))
        {
            // to ensure "teamKey" is required (not null)
            this.TeamKey = teamKey ?? throw new ArgumentNullException("teamKey is a required property for ZebraTeam and cannot be null");
            // to ensure "xs" is required (not null)
            this.Xs = xs ?? throw new ArgumentNullException("xs is a required property for ZebraTeam and cannot be null");
            // to ensure "ys" is required (not null)
            this.Ys = ys ?? throw new ArgumentNullException("ys is a required property for ZebraTeam and cannot be null");
        }
        
        /// <summary>
        /// The TBA team key for the Zebra MotionWorks data.
        /// </summary>
        /// <value>The TBA team key for the Zebra MotionWorks data.</value>
        [DataMember(Name="team_key", EmitDefaultValue=false)]
        public string TeamKey { get; set; }

        /// <summary>
        /// A list containing doubles and nulls representing a teams X position in feet at the corresponding timestamp. A null value represents no tracking data for a given timestamp.
        /// </summary>
        /// <value>A list containing doubles and nulls representing a teams X position in feet at the corresponding timestamp. A null value represents no tracking data for a given timestamp.</value>
        [DataMember(Name="xs", EmitDefaultValue=false)]
        public List<double> Xs { get; set; }

        /// <summary>
        /// A list containing doubles and nulls representing a teams Y position in feet at the corresponding timestamp. A null value represents no tracking data for a given timestamp.
        /// </summary>
        /// <value>A list containing doubles and nulls representing a teams Y position in feet at the corresponding timestamp. A null value represents no tracking data for a given timestamp.</value>
        [DataMember(Name="ys", EmitDefaultValue=false)]
        public List<double> Ys { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ZebraTeam {\n");
            sb.Append("  TeamKey: ").Append(TeamKey).Append("\n");
            sb.Append("  Xs: ").Append(Xs).Append("\n");
            sb.Append("  Ys: ").Append(Ys).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ZebraTeam);
        }

        /// <summary>
        /// Returns true if ZebraTeam instances are equal
        /// </summary>
        /// <param name="input">Instance of ZebraTeam to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ZebraTeam input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TeamKey == input.TeamKey ||
                    (this.TeamKey != null &&
                    this.TeamKey.Equals(input.TeamKey))
                ) && 
                (
                    this.Xs == input.Xs ||
                    this.Xs != null &&
                    input.Xs != null &&
                    this.Xs.SequenceEqual(input.Xs)
                ) && 
                (
                    this.Ys == input.Ys ||
                    this.Ys != null &&
                    input.Ys != null &&
                    this.Ys.SequenceEqual(input.Ys)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TeamKey != null)
                    hashCode = hashCode * 59 + this.TeamKey.GetHashCode();
                if (this.Xs != null)
                    hashCode = hashCode * 59 + this.Xs.GetHashCode();
                if (this.Ys != null)
                    hashCode = hashCode * 59 + this.Ys.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
