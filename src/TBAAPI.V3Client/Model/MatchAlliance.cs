/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TBAAPI.V3Client.Client.OpenAPIDateConverter;

namespace TBAAPI.V3Client.Model
{
    /// <summary>
    /// MatchAlliance
    /// </summary>
    [DataContract]
    public partial class MatchAlliance :  IEquatable<MatchAlliance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchAlliance" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MatchAlliance() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchAlliance" /> class.
        /// </summary>
        /// <param name="score">Score for this alliance. Will be null or -1 for an unplayed match. (required).</param>
        /// <param name="teamKeys">teamKeys (required).</param>
        /// <param name="surrogateTeamKeys">TBA team keys (eg &#x60;frc254&#x60;) of any teams playing as a surrogate..</param>
        /// <param name="dqTeamKeys">TBA team keys (eg &#x60;frc254&#x60;) of any disqualified teams..</param>
        public MatchAlliance(int score = default(int), List<string> teamKeys = default(List<string>), List<string> surrogateTeamKeys = default(List<string>), List<string> dqTeamKeys = default(List<string>))
        {
            this.Score = score;
            // to ensure "teamKeys" is required (not null)
            this.TeamKeys = teamKeys ?? throw new ArgumentNullException("teamKeys is a required property for MatchAlliance and cannot be null");
            this.SurrogateTeamKeys = surrogateTeamKeys;
            this.DqTeamKeys = dqTeamKeys;
        }
        
        /// <summary>
        /// Score for this alliance. Will be null or -1 for an unplayed match.
        /// </summary>
        /// <value>Score for this alliance. Will be null or -1 for an unplayed match.</value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public int Score { get; set; }

        /// <summary>
        /// Gets or Sets TeamKeys
        /// </summary>
        [DataMember(Name="team_keys", EmitDefaultValue=false)]
        public List<string> TeamKeys { get; set; }

        /// <summary>
        /// TBA team keys (eg &#x60;frc254&#x60;) of any teams playing as a surrogate.
        /// </summary>
        /// <value>TBA team keys (eg &#x60;frc254&#x60;) of any teams playing as a surrogate.</value>
        [DataMember(Name="surrogate_team_keys", EmitDefaultValue=false)]
        public List<string> SurrogateTeamKeys { get; set; }

        /// <summary>
        /// TBA team keys (eg &#x60;frc254&#x60;) of any disqualified teams.
        /// </summary>
        /// <value>TBA team keys (eg &#x60;frc254&#x60;) of any disqualified teams.</value>
        [DataMember(Name="dq_team_keys", EmitDefaultValue=false)]
        public List<string> DqTeamKeys { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MatchAlliance {\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  TeamKeys: ").Append(TeamKeys).Append("\n");
            sb.Append("  SurrogateTeamKeys: ").Append(SurrogateTeamKeys).Append("\n");
            sb.Append("  DqTeamKeys: ").Append(DqTeamKeys).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MatchAlliance);
        }

        /// <summary>
        /// Returns true if MatchAlliance instances are equal
        /// </summary>
        /// <param name="input">Instance of MatchAlliance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MatchAlliance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Score == input.Score ||
                    this.Score.Equals(input.Score)
                ) && 
                (
                    this.TeamKeys == input.TeamKeys ||
                    this.TeamKeys != null &&
                    input.TeamKeys != null &&
                    this.TeamKeys.SequenceEqual(input.TeamKeys)
                ) && 
                (
                    this.SurrogateTeamKeys == input.SurrogateTeamKeys ||
                    this.SurrogateTeamKeys != null &&
                    input.SurrogateTeamKeys != null &&
                    this.SurrogateTeamKeys.SequenceEqual(input.SurrogateTeamKeys)
                ) && 
                (
                    this.DqTeamKeys == input.DqTeamKeys ||
                    this.DqTeamKeys != null &&
                    input.DqTeamKeys != null &&
                    this.DqTeamKeys.SequenceEqual(input.DqTeamKeys)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.TeamKeys != null)
                    hashCode = hashCode * 59 + this.TeamKeys.GetHashCode();
                if (this.SurrogateTeamKeys != null)
                    hashCode = hashCode * 59 + this.SurrogateTeamKeys.GetHashCode();
                if (this.DqTeamKeys != null)
                    hashCode = hashCode * 59 + this.DqTeamKeys.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
