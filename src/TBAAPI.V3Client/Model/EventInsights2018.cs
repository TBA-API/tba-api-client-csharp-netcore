/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TBAAPI.V3Client.Client.OpenAPIDateConverter;

namespace TBAAPI.V3Client.Model
{
    /// <summary>
    /// Insights for FIRST Power Up qualification and elimination matches.
    /// </summary>
    [DataContract]
    public partial class EventInsights2018 :  IEquatable<EventInsights2018>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventInsights2018" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EventInsights2018() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventInsights2018" /> class.
        /// </summary>
        /// <param name="autoQuestAchieved">An array with three values, number of times auto quest was completed, number of opportunities to complete the auto quest, and percentage. (required).</param>
        /// <param name="averageBoostPlayed">Average number of boost power up scored (out of 3). (required).</param>
        /// <param name="averageEndgamePoints">Average endgame points. (required).</param>
        /// <param name="averageForcePlayed">Average number of force power up scored (out of 3). (required).</param>
        /// <param name="averageFoulScore">Average foul score. (required).</param>
        /// <param name="averagePointsAuto">Average points scored during auto. (required).</param>
        /// <param name="averagePointsTeleop">Average points scored during teleop. (required).</param>
        /// <param name="averageRunPointsAuto">Average mobility points scored during auto. (required).</param>
        /// <param name="averageScaleOwnershipPoints">Average scale ownership points scored. (required).</param>
        /// <param name="averageScaleOwnershipPointsAuto">Average scale ownership points scored during auto. (required).</param>
        /// <param name="averageScaleOwnershipPointsTeleop">Average scale ownership points scored during teleop. (required).</param>
        /// <param name="averageScore">Average score. (required).</param>
        /// <param name="averageSwitchOwnershipPoints">Average switch ownership points scored. (required).</param>
        /// <param name="averageSwitchOwnershipPointsAuto">Average switch ownership points scored during auto. (required).</param>
        /// <param name="averageSwitchOwnershipPointsTeleop">Average switch ownership points scored during teleop. (required).</param>
        /// <param name="averageVaultPoints">Average value points scored. (required).</param>
        /// <param name="averageWinMargin">Average margin of victory. (required).</param>
        /// <param name="averageWinScore">Average winning score. (required).</param>
        /// <param name="boostPlayedCounts">An array with three values, number of times a boost power up was played, number of opportunities to play a boost power up, and percentage. (required).</param>
        /// <param name="climbCounts">An array with three values, number of times a climb occurred, number of opportunities to climb, and percentage. (required).</param>
        /// <param name="faceTheBossAchieved">An array with three values, number of times an alliance faced the boss, number of opportunities to face the boss, and percentage. (required).</param>
        /// <param name="forcePlayedCounts">An array with three values, number of times a force power up was played, number of opportunities to play a force power up, and percentage. (required).</param>
        /// <param name="highScore">An array with three values, high score, match key from the match with the high score, and the name of the match (required).</param>
        /// <param name="levitatePlayedCounts">An array with three values, number of times a levitate power up was played, number of opportunities to play a levitate power up, and percentage. (required).</param>
        /// <param name="runCountsAuto">An array with three values, number of times a team scored mobility points in auto, number of opportunities to score mobility points in auto, and percentage. (required).</param>
        /// <param name="scaleNeutralPercentage">Average scale neutral percentage. (required).</param>
        /// <param name="scaleNeutralPercentageAuto">Average scale neutral percentage during auto. (required).</param>
        /// <param name="scaleNeutralPercentageTeleop">Average scale neutral percentage during teleop. (required).</param>
        /// <param name="switchOwnedCountsAuto">An array with three values, number of times a switch was owned during auto, number of opportunities to own a switch during auto, and percentage. (required).</param>
        /// <param name="unicornMatches">An array with three values, number of times a unicorn match (Win + Auto Quest + Face the Boss) occurred, number of opportunities to have a unicorn match, and percentage. (required).</param>
        /// <param name="winningOppSwitchDenialPercentageTeleop">Average opposing switch denail percentage for the winning alliance during teleop. (required).</param>
        /// <param name="winningOwnSwitchOwnershipPercentage">Average own switch ownership percentage for the winning alliance. (required).</param>
        /// <param name="winningOwnSwitchOwnershipPercentageAuto">Average own switch ownership percentage for the winning alliance during auto. (required).</param>
        /// <param name="winningOwnSwitchOwnershipPercentageTeleop">Average own switch ownership percentage for the winning alliance during teleop. (required).</param>
        /// <param name="winningScaleOwnershipPercentage">Average scale ownership percentage for the winning alliance. (required).</param>
        /// <param name="winningScaleOwnershipPercentageAuto">Average scale ownership percentage for the winning alliance during auto. (required).</param>
        /// <param name="winningScaleOwnershipPercentageTeleop">Average scale ownership percentage for the winning alliance during teleop. (required).</param>
        public EventInsights2018(List<float> autoQuestAchieved = default(List<float>), float averageBoostPlayed = default(float), float averageEndgamePoints = default(float), float averageForcePlayed = default(float), float averageFoulScore = default(float), float averagePointsAuto = default(float), float averagePointsTeleop = default(float), float averageRunPointsAuto = default(float), float averageScaleOwnershipPoints = default(float), float averageScaleOwnershipPointsAuto = default(float), float averageScaleOwnershipPointsTeleop = default(float), float averageScore = default(float), float averageSwitchOwnershipPoints = default(float), float averageSwitchOwnershipPointsAuto = default(float), float averageSwitchOwnershipPointsTeleop = default(float), float averageVaultPoints = default(float), float averageWinMargin = default(float), float averageWinScore = default(float), List<float> boostPlayedCounts = default(List<float>), List<float> climbCounts = default(List<float>), List<float> faceTheBossAchieved = default(List<float>), List<float> forcePlayedCounts = default(List<float>), List<string> highScore = default(List<string>), List<float> levitatePlayedCounts = default(List<float>), List<float> runCountsAuto = default(List<float>), float scaleNeutralPercentage = default(float), float scaleNeutralPercentageAuto = default(float), float scaleNeutralPercentageTeleop = default(float), List<float> switchOwnedCountsAuto = default(List<float>), List<float> unicornMatches = default(List<float>), float winningOppSwitchDenialPercentageTeleop = default(float), float winningOwnSwitchOwnershipPercentage = default(float), float winningOwnSwitchOwnershipPercentageAuto = default(float), float winningOwnSwitchOwnershipPercentageTeleop = default(float), float winningScaleOwnershipPercentage = default(float), float winningScaleOwnershipPercentageAuto = default(float), float winningScaleOwnershipPercentageTeleop = default(float))
        {
            // to ensure "autoQuestAchieved" is required (not null)
            this.AutoQuestAchieved = autoQuestAchieved ?? throw new ArgumentNullException("autoQuestAchieved is a required property for EventInsights2018 and cannot be null");;
            this.AverageBoostPlayed = averageBoostPlayed;
            this.AverageEndgamePoints = averageEndgamePoints;
            this.AverageForcePlayed = averageForcePlayed;
            this.AverageFoulScore = averageFoulScore;
            this.AveragePointsAuto = averagePointsAuto;
            this.AveragePointsTeleop = averagePointsTeleop;
            this.AverageRunPointsAuto = averageRunPointsAuto;
            this.AverageScaleOwnershipPoints = averageScaleOwnershipPoints;
            this.AverageScaleOwnershipPointsAuto = averageScaleOwnershipPointsAuto;
            this.AverageScaleOwnershipPointsTeleop = averageScaleOwnershipPointsTeleop;
            this.AverageScore = averageScore;
            this.AverageSwitchOwnershipPoints = averageSwitchOwnershipPoints;
            this.AverageSwitchOwnershipPointsAuto = averageSwitchOwnershipPointsAuto;
            this.AverageSwitchOwnershipPointsTeleop = averageSwitchOwnershipPointsTeleop;
            this.AverageVaultPoints = averageVaultPoints;
            this.AverageWinMargin = averageWinMargin;
            this.AverageWinScore = averageWinScore;
            // to ensure "boostPlayedCounts" is required (not null)
            this.BoostPlayedCounts = boostPlayedCounts ?? throw new ArgumentNullException("boostPlayedCounts is a required property for EventInsights2018 and cannot be null");;
            // to ensure "climbCounts" is required (not null)
            this.ClimbCounts = climbCounts ?? throw new ArgumentNullException("climbCounts is a required property for EventInsights2018 and cannot be null");;
            // to ensure "faceTheBossAchieved" is required (not null)
            this.FaceTheBossAchieved = faceTheBossAchieved ?? throw new ArgumentNullException("faceTheBossAchieved is a required property for EventInsights2018 and cannot be null");;
            // to ensure "forcePlayedCounts" is required (not null)
            this.ForcePlayedCounts = forcePlayedCounts ?? throw new ArgumentNullException("forcePlayedCounts is a required property for EventInsights2018 and cannot be null");;
            // to ensure "highScore" is required (not null)
            this.HighScore = highScore ?? throw new ArgumentNullException("highScore is a required property for EventInsights2018 and cannot be null");;
            // to ensure "levitatePlayedCounts" is required (not null)
            this.LevitatePlayedCounts = levitatePlayedCounts ?? throw new ArgumentNullException("levitatePlayedCounts is a required property for EventInsights2018 and cannot be null");;
            // to ensure "runCountsAuto" is required (not null)
            this.RunCountsAuto = runCountsAuto ?? throw new ArgumentNullException("runCountsAuto is a required property for EventInsights2018 and cannot be null");;
            this.ScaleNeutralPercentage = scaleNeutralPercentage;
            this.ScaleNeutralPercentageAuto = scaleNeutralPercentageAuto;
            this.ScaleNeutralPercentageTeleop = scaleNeutralPercentageTeleop;
            // to ensure "switchOwnedCountsAuto" is required (not null)
            this.SwitchOwnedCountsAuto = switchOwnedCountsAuto ?? throw new ArgumentNullException("switchOwnedCountsAuto is a required property for EventInsights2018 and cannot be null");;
            // to ensure "unicornMatches" is required (not null)
            this.UnicornMatches = unicornMatches ?? throw new ArgumentNullException("unicornMatches is a required property for EventInsights2018 and cannot be null");;
            this.WinningOppSwitchDenialPercentageTeleop = winningOppSwitchDenialPercentageTeleop;
            this.WinningOwnSwitchOwnershipPercentage = winningOwnSwitchOwnershipPercentage;
            this.WinningOwnSwitchOwnershipPercentageAuto = winningOwnSwitchOwnershipPercentageAuto;
            this.WinningOwnSwitchOwnershipPercentageTeleop = winningOwnSwitchOwnershipPercentageTeleop;
            this.WinningScaleOwnershipPercentage = winningScaleOwnershipPercentage;
            this.WinningScaleOwnershipPercentageAuto = winningScaleOwnershipPercentageAuto;
            this.WinningScaleOwnershipPercentageTeleop = winningScaleOwnershipPercentageTeleop;
        }
        
        /// <summary>
        /// An array with three values, number of times auto quest was completed, number of opportunities to complete the auto quest, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times auto quest was completed, number of opportunities to complete the auto quest, and percentage.</value>
        [DataMember(Name="auto_quest_achieved", EmitDefaultValue=false)]
        public List<float> AutoQuestAchieved { get; set; }

        /// <summary>
        /// Average number of boost power up scored (out of 3).
        /// </summary>
        /// <value>Average number of boost power up scored (out of 3).</value>
        [DataMember(Name="average_boost_played", EmitDefaultValue=false)]
        public float AverageBoostPlayed { get; set; }

        /// <summary>
        /// Average endgame points.
        /// </summary>
        /// <value>Average endgame points.</value>
        [DataMember(Name="average_endgame_points", EmitDefaultValue=false)]
        public float AverageEndgamePoints { get; set; }

        /// <summary>
        /// Average number of force power up scored (out of 3).
        /// </summary>
        /// <value>Average number of force power up scored (out of 3).</value>
        [DataMember(Name="average_force_played", EmitDefaultValue=false)]
        public float AverageForcePlayed { get; set; }

        /// <summary>
        /// Average foul score.
        /// </summary>
        /// <value>Average foul score.</value>
        [DataMember(Name="average_foul_score", EmitDefaultValue=false)]
        public float AverageFoulScore { get; set; }

        /// <summary>
        /// Average points scored during auto.
        /// </summary>
        /// <value>Average points scored during auto.</value>
        [DataMember(Name="average_points_auto", EmitDefaultValue=false)]
        public float AveragePointsAuto { get; set; }

        /// <summary>
        /// Average points scored during teleop.
        /// </summary>
        /// <value>Average points scored during teleop.</value>
        [DataMember(Name="average_points_teleop", EmitDefaultValue=false)]
        public float AveragePointsTeleop { get; set; }

        /// <summary>
        /// Average mobility points scored during auto.
        /// </summary>
        /// <value>Average mobility points scored during auto.</value>
        [DataMember(Name="average_run_points_auto", EmitDefaultValue=false)]
        public float AverageRunPointsAuto { get; set; }

        /// <summary>
        /// Average scale ownership points scored.
        /// </summary>
        /// <value>Average scale ownership points scored.</value>
        [DataMember(Name="average_scale_ownership_points", EmitDefaultValue=false)]
        public float AverageScaleOwnershipPoints { get; set; }

        /// <summary>
        /// Average scale ownership points scored during auto.
        /// </summary>
        /// <value>Average scale ownership points scored during auto.</value>
        [DataMember(Name="average_scale_ownership_points_auto", EmitDefaultValue=false)]
        public float AverageScaleOwnershipPointsAuto { get; set; }

        /// <summary>
        /// Average scale ownership points scored during teleop.
        /// </summary>
        /// <value>Average scale ownership points scored during teleop.</value>
        [DataMember(Name="average_scale_ownership_points_teleop", EmitDefaultValue=false)]
        public float AverageScaleOwnershipPointsTeleop { get; set; }

        /// <summary>
        /// Average score.
        /// </summary>
        /// <value>Average score.</value>
        [DataMember(Name="average_score", EmitDefaultValue=false)]
        public float AverageScore { get; set; }

        /// <summary>
        /// Average switch ownership points scored.
        /// </summary>
        /// <value>Average switch ownership points scored.</value>
        [DataMember(Name="average_switch_ownership_points", EmitDefaultValue=false)]
        public float AverageSwitchOwnershipPoints { get; set; }

        /// <summary>
        /// Average switch ownership points scored during auto.
        /// </summary>
        /// <value>Average switch ownership points scored during auto.</value>
        [DataMember(Name="average_switch_ownership_points_auto", EmitDefaultValue=false)]
        public float AverageSwitchOwnershipPointsAuto { get; set; }

        /// <summary>
        /// Average switch ownership points scored during teleop.
        /// </summary>
        /// <value>Average switch ownership points scored during teleop.</value>
        [DataMember(Name="average_switch_ownership_points_teleop", EmitDefaultValue=false)]
        public float AverageSwitchOwnershipPointsTeleop { get; set; }

        /// <summary>
        /// Average value points scored.
        /// </summary>
        /// <value>Average value points scored.</value>
        [DataMember(Name="average_vault_points", EmitDefaultValue=false)]
        public float AverageVaultPoints { get; set; }

        /// <summary>
        /// Average margin of victory.
        /// </summary>
        /// <value>Average margin of victory.</value>
        [DataMember(Name="average_win_margin", EmitDefaultValue=false)]
        public float AverageWinMargin { get; set; }

        /// <summary>
        /// Average winning score.
        /// </summary>
        /// <value>Average winning score.</value>
        [DataMember(Name="average_win_score", EmitDefaultValue=false)]
        public float AverageWinScore { get; set; }

        /// <summary>
        /// An array with three values, number of times a boost power up was played, number of opportunities to play a boost power up, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times a boost power up was played, number of opportunities to play a boost power up, and percentage.</value>
        [DataMember(Name="boost_played_counts", EmitDefaultValue=false)]
        public List<float> BoostPlayedCounts { get; set; }

        /// <summary>
        /// An array with three values, number of times a climb occurred, number of opportunities to climb, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times a climb occurred, number of opportunities to climb, and percentage.</value>
        [DataMember(Name="climb_counts", EmitDefaultValue=false)]
        public List<float> ClimbCounts { get; set; }

        /// <summary>
        /// An array with three values, number of times an alliance faced the boss, number of opportunities to face the boss, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times an alliance faced the boss, number of opportunities to face the boss, and percentage.</value>
        [DataMember(Name="face_the_boss_achieved", EmitDefaultValue=false)]
        public List<float> FaceTheBossAchieved { get; set; }

        /// <summary>
        /// An array with three values, number of times a force power up was played, number of opportunities to play a force power up, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times a force power up was played, number of opportunities to play a force power up, and percentage.</value>
        [DataMember(Name="force_played_counts", EmitDefaultValue=false)]
        public List<float> ForcePlayedCounts { get; set; }

        /// <summary>
        /// An array with three values, high score, match key from the match with the high score, and the name of the match
        /// </summary>
        /// <value>An array with three values, high score, match key from the match with the high score, and the name of the match</value>
        [DataMember(Name="high_score", EmitDefaultValue=false)]
        public List<string> HighScore { get; set; }

        /// <summary>
        /// An array with three values, number of times a levitate power up was played, number of opportunities to play a levitate power up, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times a levitate power up was played, number of opportunities to play a levitate power up, and percentage.</value>
        [DataMember(Name="levitate_played_counts", EmitDefaultValue=false)]
        public List<float> LevitatePlayedCounts { get; set; }

        /// <summary>
        /// An array with three values, number of times a team scored mobility points in auto, number of opportunities to score mobility points in auto, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times a team scored mobility points in auto, number of opportunities to score mobility points in auto, and percentage.</value>
        [DataMember(Name="run_counts_auto", EmitDefaultValue=false)]
        public List<float> RunCountsAuto { get; set; }

        /// <summary>
        /// Average scale neutral percentage.
        /// </summary>
        /// <value>Average scale neutral percentage.</value>
        [DataMember(Name="scale_neutral_percentage", EmitDefaultValue=false)]
        public float ScaleNeutralPercentage { get; set; }

        /// <summary>
        /// Average scale neutral percentage during auto.
        /// </summary>
        /// <value>Average scale neutral percentage during auto.</value>
        [DataMember(Name="scale_neutral_percentage_auto", EmitDefaultValue=false)]
        public float ScaleNeutralPercentageAuto { get; set; }

        /// <summary>
        /// Average scale neutral percentage during teleop.
        /// </summary>
        /// <value>Average scale neutral percentage during teleop.</value>
        [DataMember(Name="scale_neutral_percentage_teleop", EmitDefaultValue=false)]
        public float ScaleNeutralPercentageTeleop { get; set; }

        /// <summary>
        /// An array with three values, number of times a switch was owned during auto, number of opportunities to own a switch during auto, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times a switch was owned during auto, number of opportunities to own a switch during auto, and percentage.</value>
        [DataMember(Name="switch_owned_counts_auto", EmitDefaultValue=false)]
        public List<float> SwitchOwnedCountsAuto { get; set; }

        /// <summary>
        /// An array with three values, number of times a unicorn match (Win + Auto Quest + Face the Boss) occurred, number of opportunities to have a unicorn match, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times a unicorn match (Win + Auto Quest + Face the Boss) occurred, number of opportunities to have a unicorn match, and percentage.</value>
        [DataMember(Name="unicorn_matches", EmitDefaultValue=false)]
        public List<float> UnicornMatches { get; set; }

        /// <summary>
        /// Average opposing switch denail percentage for the winning alliance during teleop.
        /// </summary>
        /// <value>Average opposing switch denail percentage for the winning alliance during teleop.</value>
        [DataMember(Name="winning_opp_switch_denial_percentage_teleop", EmitDefaultValue=false)]
        public float WinningOppSwitchDenialPercentageTeleop { get; set; }

        /// <summary>
        /// Average own switch ownership percentage for the winning alliance.
        /// </summary>
        /// <value>Average own switch ownership percentage for the winning alliance.</value>
        [DataMember(Name="winning_own_switch_ownership_percentage", EmitDefaultValue=false)]
        public float WinningOwnSwitchOwnershipPercentage { get; set; }

        /// <summary>
        /// Average own switch ownership percentage for the winning alliance during auto.
        /// </summary>
        /// <value>Average own switch ownership percentage for the winning alliance during auto.</value>
        [DataMember(Name="winning_own_switch_ownership_percentage_auto", EmitDefaultValue=false)]
        public float WinningOwnSwitchOwnershipPercentageAuto { get; set; }

        /// <summary>
        /// Average own switch ownership percentage for the winning alliance during teleop.
        /// </summary>
        /// <value>Average own switch ownership percentage for the winning alliance during teleop.</value>
        [DataMember(Name="winning_own_switch_ownership_percentage_teleop", EmitDefaultValue=false)]
        public float WinningOwnSwitchOwnershipPercentageTeleop { get; set; }

        /// <summary>
        /// Average scale ownership percentage for the winning alliance.
        /// </summary>
        /// <value>Average scale ownership percentage for the winning alliance.</value>
        [DataMember(Name="winning_scale_ownership_percentage", EmitDefaultValue=false)]
        public float WinningScaleOwnershipPercentage { get; set; }

        /// <summary>
        /// Average scale ownership percentage for the winning alliance during auto.
        /// </summary>
        /// <value>Average scale ownership percentage for the winning alliance during auto.</value>
        [DataMember(Name="winning_scale_ownership_percentage_auto", EmitDefaultValue=false)]
        public float WinningScaleOwnershipPercentageAuto { get; set; }

        /// <summary>
        /// Average scale ownership percentage for the winning alliance during teleop.
        /// </summary>
        /// <value>Average scale ownership percentage for the winning alliance during teleop.</value>
        [DataMember(Name="winning_scale_ownership_percentage_teleop", EmitDefaultValue=false)]
        public float WinningScaleOwnershipPercentageTeleop { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventInsights2018 {\n");
            sb.Append("  AutoQuestAchieved: ").Append(AutoQuestAchieved).Append("\n");
            sb.Append("  AverageBoostPlayed: ").Append(AverageBoostPlayed).Append("\n");
            sb.Append("  AverageEndgamePoints: ").Append(AverageEndgamePoints).Append("\n");
            sb.Append("  AverageForcePlayed: ").Append(AverageForcePlayed).Append("\n");
            sb.Append("  AverageFoulScore: ").Append(AverageFoulScore).Append("\n");
            sb.Append("  AveragePointsAuto: ").Append(AveragePointsAuto).Append("\n");
            sb.Append("  AveragePointsTeleop: ").Append(AveragePointsTeleop).Append("\n");
            sb.Append("  AverageRunPointsAuto: ").Append(AverageRunPointsAuto).Append("\n");
            sb.Append("  AverageScaleOwnershipPoints: ").Append(AverageScaleOwnershipPoints).Append("\n");
            sb.Append("  AverageScaleOwnershipPointsAuto: ").Append(AverageScaleOwnershipPointsAuto).Append("\n");
            sb.Append("  AverageScaleOwnershipPointsTeleop: ").Append(AverageScaleOwnershipPointsTeleop).Append("\n");
            sb.Append("  AverageScore: ").Append(AverageScore).Append("\n");
            sb.Append("  AverageSwitchOwnershipPoints: ").Append(AverageSwitchOwnershipPoints).Append("\n");
            sb.Append("  AverageSwitchOwnershipPointsAuto: ").Append(AverageSwitchOwnershipPointsAuto).Append("\n");
            sb.Append("  AverageSwitchOwnershipPointsTeleop: ").Append(AverageSwitchOwnershipPointsTeleop).Append("\n");
            sb.Append("  AverageVaultPoints: ").Append(AverageVaultPoints).Append("\n");
            sb.Append("  AverageWinMargin: ").Append(AverageWinMargin).Append("\n");
            sb.Append("  AverageWinScore: ").Append(AverageWinScore).Append("\n");
            sb.Append("  BoostPlayedCounts: ").Append(BoostPlayedCounts).Append("\n");
            sb.Append("  ClimbCounts: ").Append(ClimbCounts).Append("\n");
            sb.Append("  FaceTheBossAchieved: ").Append(FaceTheBossAchieved).Append("\n");
            sb.Append("  ForcePlayedCounts: ").Append(ForcePlayedCounts).Append("\n");
            sb.Append("  HighScore: ").Append(HighScore).Append("\n");
            sb.Append("  LevitatePlayedCounts: ").Append(LevitatePlayedCounts).Append("\n");
            sb.Append("  RunCountsAuto: ").Append(RunCountsAuto).Append("\n");
            sb.Append("  ScaleNeutralPercentage: ").Append(ScaleNeutralPercentage).Append("\n");
            sb.Append("  ScaleNeutralPercentageAuto: ").Append(ScaleNeutralPercentageAuto).Append("\n");
            sb.Append("  ScaleNeutralPercentageTeleop: ").Append(ScaleNeutralPercentageTeleop).Append("\n");
            sb.Append("  SwitchOwnedCountsAuto: ").Append(SwitchOwnedCountsAuto).Append("\n");
            sb.Append("  UnicornMatches: ").Append(UnicornMatches).Append("\n");
            sb.Append("  WinningOppSwitchDenialPercentageTeleop: ").Append(WinningOppSwitchDenialPercentageTeleop).Append("\n");
            sb.Append("  WinningOwnSwitchOwnershipPercentage: ").Append(WinningOwnSwitchOwnershipPercentage).Append("\n");
            sb.Append("  WinningOwnSwitchOwnershipPercentageAuto: ").Append(WinningOwnSwitchOwnershipPercentageAuto).Append("\n");
            sb.Append("  WinningOwnSwitchOwnershipPercentageTeleop: ").Append(WinningOwnSwitchOwnershipPercentageTeleop).Append("\n");
            sb.Append("  WinningScaleOwnershipPercentage: ").Append(WinningScaleOwnershipPercentage).Append("\n");
            sb.Append("  WinningScaleOwnershipPercentageAuto: ").Append(WinningScaleOwnershipPercentageAuto).Append("\n");
            sb.Append("  WinningScaleOwnershipPercentageTeleop: ").Append(WinningScaleOwnershipPercentageTeleop).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventInsights2018);
        }

        /// <summary>
        /// Returns true if EventInsights2018 instances are equal
        /// </summary>
        /// <param name="input">Instance of EventInsights2018 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventInsights2018 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AutoQuestAchieved == input.AutoQuestAchieved ||
                    this.AutoQuestAchieved != null &&
                    input.AutoQuestAchieved != null &&
                    this.AutoQuestAchieved.SequenceEqual(input.AutoQuestAchieved)
                ) && 
                (
                    this.AverageBoostPlayed == input.AverageBoostPlayed ||
                    this.AverageBoostPlayed.Equals(input.AverageBoostPlayed)
                ) && 
                (
                    this.AverageEndgamePoints == input.AverageEndgamePoints ||
                    this.AverageEndgamePoints.Equals(input.AverageEndgamePoints)
                ) && 
                (
                    this.AverageForcePlayed == input.AverageForcePlayed ||
                    this.AverageForcePlayed.Equals(input.AverageForcePlayed)
                ) && 
                (
                    this.AverageFoulScore == input.AverageFoulScore ||
                    this.AverageFoulScore.Equals(input.AverageFoulScore)
                ) && 
                (
                    this.AveragePointsAuto == input.AveragePointsAuto ||
                    this.AveragePointsAuto.Equals(input.AveragePointsAuto)
                ) && 
                (
                    this.AveragePointsTeleop == input.AveragePointsTeleop ||
                    this.AveragePointsTeleop.Equals(input.AveragePointsTeleop)
                ) && 
                (
                    this.AverageRunPointsAuto == input.AverageRunPointsAuto ||
                    this.AverageRunPointsAuto.Equals(input.AverageRunPointsAuto)
                ) && 
                (
                    this.AverageScaleOwnershipPoints == input.AverageScaleOwnershipPoints ||
                    this.AverageScaleOwnershipPoints.Equals(input.AverageScaleOwnershipPoints)
                ) && 
                (
                    this.AverageScaleOwnershipPointsAuto == input.AverageScaleOwnershipPointsAuto ||
                    this.AverageScaleOwnershipPointsAuto.Equals(input.AverageScaleOwnershipPointsAuto)
                ) && 
                (
                    this.AverageScaleOwnershipPointsTeleop == input.AverageScaleOwnershipPointsTeleop ||
                    this.AverageScaleOwnershipPointsTeleop.Equals(input.AverageScaleOwnershipPointsTeleop)
                ) && 
                (
                    this.AverageScore == input.AverageScore ||
                    this.AverageScore.Equals(input.AverageScore)
                ) && 
                (
                    this.AverageSwitchOwnershipPoints == input.AverageSwitchOwnershipPoints ||
                    this.AverageSwitchOwnershipPoints.Equals(input.AverageSwitchOwnershipPoints)
                ) && 
                (
                    this.AverageSwitchOwnershipPointsAuto == input.AverageSwitchOwnershipPointsAuto ||
                    this.AverageSwitchOwnershipPointsAuto.Equals(input.AverageSwitchOwnershipPointsAuto)
                ) && 
                (
                    this.AverageSwitchOwnershipPointsTeleop == input.AverageSwitchOwnershipPointsTeleop ||
                    this.AverageSwitchOwnershipPointsTeleop.Equals(input.AverageSwitchOwnershipPointsTeleop)
                ) && 
                (
                    this.AverageVaultPoints == input.AverageVaultPoints ||
                    this.AverageVaultPoints.Equals(input.AverageVaultPoints)
                ) && 
                (
                    this.AverageWinMargin == input.AverageWinMargin ||
                    this.AverageWinMargin.Equals(input.AverageWinMargin)
                ) && 
                (
                    this.AverageWinScore == input.AverageWinScore ||
                    this.AverageWinScore.Equals(input.AverageWinScore)
                ) && 
                (
                    this.BoostPlayedCounts == input.BoostPlayedCounts ||
                    this.BoostPlayedCounts != null &&
                    input.BoostPlayedCounts != null &&
                    this.BoostPlayedCounts.SequenceEqual(input.BoostPlayedCounts)
                ) && 
                (
                    this.ClimbCounts == input.ClimbCounts ||
                    this.ClimbCounts != null &&
                    input.ClimbCounts != null &&
                    this.ClimbCounts.SequenceEqual(input.ClimbCounts)
                ) && 
                (
                    this.FaceTheBossAchieved == input.FaceTheBossAchieved ||
                    this.FaceTheBossAchieved != null &&
                    input.FaceTheBossAchieved != null &&
                    this.FaceTheBossAchieved.SequenceEqual(input.FaceTheBossAchieved)
                ) && 
                (
                    this.ForcePlayedCounts == input.ForcePlayedCounts ||
                    this.ForcePlayedCounts != null &&
                    input.ForcePlayedCounts != null &&
                    this.ForcePlayedCounts.SequenceEqual(input.ForcePlayedCounts)
                ) && 
                (
                    this.HighScore == input.HighScore ||
                    this.HighScore != null &&
                    input.HighScore != null &&
                    this.HighScore.SequenceEqual(input.HighScore)
                ) && 
                (
                    this.LevitatePlayedCounts == input.LevitatePlayedCounts ||
                    this.LevitatePlayedCounts != null &&
                    input.LevitatePlayedCounts != null &&
                    this.LevitatePlayedCounts.SequenceEqual(input.LevitatePlayedCounts)
                ) && 
                (
                    this.RunCountsAuto == input.RunCountsAuto ||
                    this.RunCountsAuto != null &&
                    input.RunCountsAuto != null &&
                    this.RunCountsAuto.SequenceEqual(input.RunCountsAuto)
                ) && 
                (
                    this.ScaleNeutralPercentage == input.ScaleNeutralPercentage ||
                    this.ScaleNeutralPercentage.Equals(input.ScaleNeutralPercentage)
                ) && 
                (
                    this.ScaleNeutralPercentageAuto == input.ScaleNeutralPercentageAuto ||
                    this.ScaleNeutralPercentageAuto.Equals(input.ScaleNeutralPercentageAuto)
                ) && 
                (
                    this.ScaleNeutralPercentageTeleop == input.ScaleNeutralPercentageTeleop ||
                    this.ScaleNeutralPercentageTeleop.Equals(input.ScaleNeutralPercentageTeleop)
                ) && 
                (
                    this.SwitchOwnedCountsAuto == input.SwitchOwnedCountsAuto ||
                    this.SwitchOwnedCountsAuto != null &&
                    input.SwitchOwnedCountsAuto != null &&
                    this.SwitchOwnedCountsAuto.SequenceEqual(input.SwitchOwnedCountsAuto)
                ) && 
                (
                    this.UnicornMatches == input.UnicornMatches ||
                    this.UnicornMatches != null &&
                    input.UnicornMatches != null &&
                    this.UnicornMatches.SequenceEqual(input.UnicornMatches)
                ) && 
                (
                    this.WinningOppSwitchDenialPercentageTeleop == input.WinningOppSwitchDenialPercentageTeleop ||
                    this.WinningOppSwitchDenialPercentageTeleop.Equals(input.WinningOppSwitchDenialPercentageTeleop)
                ) && 
                (
                    this.WinningOwnSwitchOwnershipPercentage == input.WinningOwnSwitchOwnershipPercentage ||
                    this.WinningOwnSwitchOwnershipPercentage.Equals(input.WinningOwnSwitchOwnershipPercentage)
                ) && 
                (
                    this.WinningOwnSwitchOwnershipPercentageAuto == input.WinningOwnSwitchOwnershipPercentageAuto ||
                    this.WinningOwnSwitchOwnershipPercentageAuto.Equals(input.WinningOwnSwitchOwnershipPercentageAuto)
                ) && 
                (
                    this.WinningOwnSwitchOwnershipPercentageTeleop == input.WinningOwnSwitchOwnershipPercentageTeleop ||
                    this.WinningOwnSwitchOwnershipPercentageTeleop.Equals(input.WinningOwnSwitchOwnershipPercentageTeleop)
                ) && 
                (
                    this.WinningScaleOwnershipPercentage == input.WinningScaleOwnershipPercentage ||
                    this.WinningScaleOwnershipPercentage.Equals(input.WinningScaleOwnershipPercentage)
                ) && 
                (
                    this.WinningScaleOwnershipPercentageAuto == input.WinningScaleOwnershipPercentageAuto ||
                    this.WinningScaleOwnershipPercentageAuto.Equals(input.WinningScaleOwnershipPercentageAuto)
                ) && 
                (
                    this.WinningScaleOwnershipPercentageTeleop == input.WinningScaleOwnershipPercentageTeleop ||
                    this.WinningScaleOwnershipPercentageTeleop.Equals(input.WinningScaleOwnershipPercentageTeleop)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AutoQuestAchieved != null)
                    hashCode = hashCode * 59 + this.AutoQuestAchieved.GetHashCode();
                hashCode = hashCode * 59 + this.AverageBoostPlayed.GetHashCode();
                hashCode = hashCode * 59 + this.AverageEndgamePoints.GetHashCode();
                hashCode = hashCode * 59 + this.AverageForcePlayed.GetHashCode();
                hashCode = hashCode * 59 + this.AverageFoulScore.GetHashCode();
                hashCode = hashCode * 59 + this.AveragePointsAuto.GetHashCode();
                hashCode = hashCode * 59 + this.AveragePointsTeleop.GetHashCode();
                hashCode = hashCode * 59 + this.AverageRunPointsAuto.GetHashCode();
                hashCode = hashCode * 59 + this.AverageScaleOwnershipPoints.GetHashCode();
                hashCode = hashCode * 59 + this.AverageScaleOwnershipPointsAuto.GetHashCode();
                hashCode = hashCode * 59 + this.AverageScaleOwnershipPointsTeleop.GetHashCode();
                hashCode = hashCode * 59 + this.AverageScore.GetHashCode();
                hashCode = hashCode * 59 + this.AverageSwitchOwnershipPoints.GetHashCode();
                hashCode = hashCode * 59 + this.AverageSwitchOwnershipPointsAuto.GetHashCode();
                hashCode = hashCode * 59 + this.AverageSwitchOwnershipPointsTeleop.GetHashCode();
                hashCode = hashCode * 59 + this.AverageVaultPoints.GetHashCode();
                hashCode = hashCode * 59 + this.AverageWinMargin.GetHashCode();
                hashCode = hashCode * 59 + this.AverageWinScore.GetHashCode();
                if (this.BoostPlayedCounts != null)
                    hashCode = hashCode * 59 + this.BoostPlayedCounts.GetHashCode();
                if (this.ClimbCounts != null)
                    hashCode = hashCode * 59 + this.ClimbCounts.GetHashCode();
                if (this.FaceTheBossAchieved != null)
                    hashCode = hashCode * 59 + this.FaceTheBossAchieved.GetHashCode();
                if (this.ForcePlayedCounts != null)
                    hashCode = hashCode * 59 + this.ForcePlayedCounts.GetHashCode();
                if (this.HighScore != null)
                    hashCode = hashCode * 59 + this.HighScore.GetHashCode();
                if (this.LevitatePlayedCounts != null)
                    hashCode = hashCode * 59 + this.LevitatePlayedCounts.GetHashCode();
                if (this.RunCountsAuto != null)
                    hashCode = hashCode * 59 + this.RunCountsAuto.GetHashCode();
                hashCode = hashCode * 59 + this.ScaleNeutralPercentage.GetHashCode();
                hashCode = hashCode * 59 + this.ScaleNeutralPercentageAuto.GetHashCode();
                hashCode = hashCode * 59 + this.ScaleNeutralPercentageTeleop.GetHashCode();
                if (this.SwitchOwnedCountsAuto != null)
                    hashCode = hashCode * 59 + this.SwitchOwnedCountsAuto.GetHashCode();
                if (this.UnicornMatches != null)
                    hashCode = hashCode * 59 + this.UnicornMatches.GetHashCode();
                hashCode = hashCode * 59 + this.WinningOppSwitchDenialPercentageTeleop.GetHashCode();
                hashCode = hashCode * 59 + this.WinningOwnSwitchOwnershipPercentage.GetHashCode();
                hashCode = hashCode * 59 + this.WinningOwnSwitchOwnershipPercentageAuto.GetHashCode();
                hashCode = hashCode * 59 + this.WinningOwnSwitchOwnershipPercentageTeleop.GetHashCode();
                hashCode = hashCode * 59 + this.WinningScaleOwnershipPercentage.GetHashCode();
                hashCode = hashCode * 59 + this.WinningScaleOwnershipPercentageAuto.GetHashCode();
                hashCode = hashCode * 59 + this.WinningScaleOwnershipPercentageTeleop.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
